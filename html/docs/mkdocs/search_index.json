{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the documentation pages of NoFussFramework.\n\n\nWhat about a \nlittle introduction\n?\n\n\nIf you want to try it on your computer, \nthere's an app for that\n.\n\n\nLooking for the API documentation? It's being written, be patient :(", 
            "title": "Documentation Home"
        }, 
        {
            "location": "/intro/introduction/", 
            "text": "What can you expect from NoFussFramework\n\n\nA short learning curve\n\n\nNoFussFramework was designed to be easy to use. There's no magic behind.\nAlso, though being a little bit opinionated, you can extend it easily.\n\n\nA complete MVC without all the fuss\n\n\nThe main reason for building the project was that we cannot find a performant yet useful framework to work on for our projects. Micro frameworks are way too limited for being used in a few environments where you have a lot of developers working on multiple projects. Big and fat frameworks like Symfony or Zend or Laravel have a long learning curve, have below-than-average performances so they are not usable on large websites without using a lot of servers. We also believe that we cannot build everything better than the others ;) so it will be up to you to include other php libraries for like creating pdf, connecting to an outdated SOAP api, etc.     \n\n\nPerformance oriented\n\n\nNoFussFramework is an MVC framework that will help you build small or large applications with performance in mind.\n\n\nDesigned for web or cli applications, and multiple languages\n\n\nYou can use the same code for multiple languages, the framework will tell you using the url or a cookie which locale/language to use.\n\n\nThe same rule applies for multiple versions, like a web version, a mobile/tablet/watch version, a cli console. You can even redirect to another URL if you want to have another application for your mobile/tablet application.  \n\n\nDesigned for large applications (or small)\n\n\nThe application is divided into modules (for example \"user\"), and controllers (for example, \"profile\") and actions (for example, \"updatePicture\").\n\n\nThe views are also separated into modules so you won't have 100 templates in the same folder, although you can however put them in the same folder and use common folders for like the header, footer, etc. \n\n\nWhat you will miss, or not\n\n\nObviously, NoFussFramework was not designed to do everything of what you can expect from a fat framework like Symfony or Zend Framework. For example, it doesn't handle user login, this task should be performed specifically by your code for your project, it's not included since there are a lot of different ways to authenticate/register a user. \n\n\nA few benchmarks\n\n\nWhen you have an \"hello world\" in 200 ms on an average small server on other frameworks (laravel, symfony, zend 2...), NoFussFramework will say \"hello world\" within 15 ms maximum after routing, session handling etc.\n\n\nNoFussFramework is really efficient in CPU and memory usage, leveraging basic technologies like lazy loading, limiting the number of files, etc. And a constant benchmarking while developing it to fix the bottlenecks.", 
            "title": "Introduction"
        }, 
        {
            "location": "/intro/introduction/#what-can-you-expect-from-nofussframework", 
            "text": "A short learning curve  NoFussFramework was designed to be easy to use. There's no magic behind. Also, though being a little bit opinionated, you can extend it easily.  A complete MVC without all the fuss  The main reason for building the project was that we cannot find a performant yet useful framework to work on for our projects. Micro frameworks are way too limited for being used in a few environments where you have a lot of developers working on multiple projects. Big and fat frameworks like Symfony or Zend or Laravel have a long learning curve, have below-than-average performances so they are not usable on large websites without using a lot of servers. We also believe that we cannot build everything better than the others ;) so it will be up to you to include other php libraries for like creating pdf, connecting to an outdated SOAP api, etc.       Performance oriented  NoFussFramework is an MVC framework that will help you build small or large applications with performance in mind.  Designed for web or cli applications, and multiple languages  You can use the same code for multiple languages, the framework will tell you using the url or a cookie which locale/language to use.  The same rule applies for multiple versions, like a web version, a mobile/tablet/watch version, a cli console. You can even redirect to another URL if you want to have another application for your mobile/tablet application.    Designed for large applications (or small)  The application is divided into modules (for example \"user\"), and controllers (for example, \"profile\") and actions (for example, \"updatePicture\").  The views are also separated into modules so you won't have 100 templates in the same folder, although you can however put them in the same folder and use common folders for like the header, footer, etc.   What you will miss, or not  Obviously, NoFussFramework was not designed to do everything of what you can expect from a fat framework like Symfony or Zend Framework. For example, it doesn't handle user login, this task should be performed specifically by your code for your project, it's not included since there are a lot of different ways to authenticate/register a user.   A few benchmarks  When you have an \"hello world\" in 200 ms on an average small server on other frameworks (laravel, symfony, zend 2...), NoFussFramework will say \"hello world\" within 15 ms maximum after routing, session handling etc.  NoFussFramework is really efficient in CPU and memory usage, leveraging basic technologies like lazy loading, limiting the number of files, etc. And a constant benchmarking while developing it to fix the bottlenecks.", 
            "title": "What can you expect from NoFussFramework"
        }, 
        {
            "location": "/setup/try-it-now/", 
            "text": "Try it now with Vagrant\n\n\nSince we are so kind with you, we built a VM which you can play with, so you can get on board quickly.\n\n\nThe VM contains the same code as in the github repository but also a preconfigured apache + php + mysql + memcache + apcu, and some php extensions that you can use at the beginning.\n\n\nVagrant setup\n\n\nIf you don't have Vagrant on your computer, download it from here:\n\n\nhttps://www.vagrantup.com/downloads.html\n\n\nVirtualbox setup\n\n\nThe image for Vagrant uses Virtualbox. Download it from here:\n\n\nhttps://www.virtualbox.org/wiki/Downloads\n\n\nStart the vm with NoFussFramework:\n\n\nDownload the Vagrant settings for our image. Go into your home folder for example and clone this git repository:\n\n\ngit clone https://github.com/jarnix/nofussvagrant.git\n\n\n\nThen go into the nofussvagrant directory and start the VM with:\n\n\nvagrant up\n\n\n\nThe first time it will take a few minutes to download the image of the VM.\n\n\nOpen your browser:\n\n\nhttp://localhost:8888\n\n\n\nModify the sources in the VM:\n\n\nvagrant ssh\n\n\n\nThe files are located in /var/www/nofuss/demosite", 
            "title": "Try it now"
        }, 
        {
            "location": "/setup/try-it-now/#try-it-now-with-vagrant", 
            "text": "Since we are so kind with you, we built a VM which you can play with, so you can get on board quickly.  The VM contains the same code as in the github repository but also a preconfigured apache + php + mysql + memcache + apcu, and some php extensions that you can use at the beginning.", 
            "title": "Try it now with Vagrant"
        }, 
        {
            "location": "/setup/try-it-now/#vagrant-setup", 
            "text": "If you don't have Vagrant on your computer, download it from here:  https://www.vagrantup.com/downloads.html", 
            "title": "Vagrant setup"
        }, 
        {
            "location": "/setup/try-it-now/#virtualbox-setup", 
            "text": "The image for Vagrant uses Virtualbox. Download it from here:  https://www.virtualbox.org/wiki/Downloads", 
            "title": "Virtualbox setup"
        }, 
        {
            "location": "/setup/try-it-now/#start-the-vm-with-nofussframework", 
            "text": "Download the Vagrant settings for our image. Go into your home folder for example and clone this git repository:  git clone https://github.com/jarnix/nofussvagrant.git  Then go into the nofussvagrant directory and start the VM with:  vagrant up  The first time it will take a few minutes to download the image of the VM.  Open your browser:  http://localhost:8888", 
            "title": "Start the vm with NoFussFramework:"
        }, 
        {
            "location": "/setup/try-it-now/#modify-the-sources-in-the-vm", 
            "text": "vagrant ssh  The files are located in /var/www/nofuss/demosite", 
            "title": "Modify the sources in the VM:"
        }, 
        {
            "location": "/setup/requirements/", 
            "text": "In the default installation for a website, you will need apache2 and php5. Of course, you can also use another webserver like nginx and another php engine than apache's mod-php. \n\n\nApache2\n\n\n\n\nmod_rewrite  \n\n\n\n\nPHP \n= 5.3\n\n\n\n\nphp5-intl\n\n\nphp5-mcrypt\n\n\n\n\nThe other extensions are optional and the framework won't crash (as in GTA 5).\n\n\nIf you want to connect to a mysql database:\n\n\n\n\nphp5-mysqli\n\n\n\n\nIf you want to use memcache (as session store or cache store), this extension will be necessary:\n\n\n\n\nphp5-memcache\n\n\n\n\nIf you want to use the image functions:\n\n\n\n\nphp5-imagick", 
            "title": "Requirements"
        }, 
        {
            "location": "/setup/requirements/#apache2", 
            "text": "mod_rewrite", 
            "title": "Apache2"
        }, 
        {
            "location": "/setup/requirements/#php-53", 
            "text": "php5-intl  php5-mcrypt   The other extensions are optional and the framework won't crash (as in GTA 5).  If you want to connect to a mysql database:   php5-mysqli   If you want to use memcache (as session store or cache store), this extension will be necessary:   php5-memcache   If you want to use the image functions:   php5-imagick", 
            "title": "PHP &gt;= 5.3"
        }, 
        {
            "location": "/setup/installation/", 
            "text": "In this tutorial, we assume that your web root is /var/www and that you can create files in this folder. \n\n\nGet NoFussFramework on your server\n\n\ncd /var/www\ngit clone https://github.com/jarnix/nofuss.git\ncd nofuss\n\n\n\nYou will see 3 directories:\n\n\n\n\ndemosite, which is a \"hello world\" that you can modify freely\n\n\nemptysite, which should be your skeleton when building a new application with NoFussFramework\n\n\nlibrary: the folder containing the framework and where you can put different classes used by your application(s)\n\n\n\n\nSetup an apache virtual site\n\n\nWe will name our virtual site \"nofuss1\".\n\n\nBeware, this configuration is really small and not so secure (\"AllowOverride All\").\n\n\ncd /etc/apache2/sites-available\nnano nofuss1\n\n\n\nCopy these lines and adjust according to your server's configuration.\n\n\nVirtualHost *:80\n\n    ServerAdmin webmaster@localhost\n\n    DocumentRoot /var/www/nofuss/demosite/html\n    \nDirectory /\n\n            Options FollowSymLinks\n            AllowOverride All\n    \n/Directory\n\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n\n    LogLevel warn\n\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n/VirtualHost\n\n\n\n\n\nWrite and exit (ctrl+o, ctrl+x).\n\n\nEnable the website :\n\n\na2ensite nofuss1\n\n\n\nOptional: get Smarty\n\n\nif you want to use Smarty as the template engine for your application, you have to download the latest version:\n\n\ncd /usr/local/src\nwget http://www.smarty.net/files/Smarty-3.1.21.tar.gz\ntar -xvzf Smarty-3.1.21.tar.gz\ncd Smarty-3.1.21\nmv libs /var/www/nofuss/library/php/classes/Smarty\n\n\n\nSet directory permissions for Smarty\n\n\nIf you are going to use Smarty, you will need to allow the apache \"www-data\" user to write the compiled templates in his templates_c folder:\n\n\nchown -R www-data.www-data /var/www/nofuss/demosite/cache/templates_c\n\n\n\nAnd you're good to go.", 
            "title": "Installation"
        }, 
        {
            "location": "/setup/installation/#get-nofussframework-on-your-server", 
            "text": "cd /var/www\ngit clone https://github.com/jarnix/nofuss.git\ncd nofuss  You will see 3 directories:   demosite, which is a \"hello world\" that you can modify freely  emptysite, which should be your skeleton when building a new application with NoFussFramework  library: the folder containing the framework and where you can put different classes used by your application(s)", 
            "title": "Get NoFussFramework on your server"
        }, 
        {
            "location": "/setup/installation/#setup-an-apache-virtual-site", 
            "text": "We will name our virtual site \"nofuss1\".  Beware, this configuration is really small and not so secure (\"AllowOverride All\").  cd /etc/apache2/sites-available\nnano nofuss1  Copy these lines and adjust according to your server's configuration.  VirtualHost *:80 \n    ServerAdmin webmaster@localhost\n\n    DocumentRoot /var/www/nofuss/demosite/html\n     Directory / \n            Options FollowSymLinks\n            AllowOverride All\n     /Directory \n    ErrorLog ${APACHE_LOG_DIR}/error.log\n\n    LogLevel warn\n\n    CustomLog ${APACHE_LOG_DIR}/access.log combined /VirtualHost   Write and exit (ctrl+o, ctrl+x).  Enable the website :  a2ensite nofuss1", 
            "title": "Setup an apache virtual site"
        }, 
        {
            "location": "/setup/installation/#optional-get-smarty", 
            "text": "if you want to use Smarty as the template engine for your application, you have to download the latest version:  cd /usr/local/src\nwget http://www.smarty.net/files/Smarty-3.1.21.tar.gz\ntar -xvzf Smarty-3.1.21.tar.gz\ncd Smarty-3.1.21\nmv libs /var/www/nofuss/library/php/classes/Smarty", 
            "title": "Optional: get Smarty"
        }, 
        {
            "location": "/setup/installation/#set-directory-permissions-for-smarty", 
            "text": "If you are going to use Smarty, you will need to allow the apache \"www-data\" user to write the compiled templates in his templates_c folder:  chown -R www-data.www-data /var/www/nofuss/demosite/cache/templates_c  And you're good to go.", 
            "title": "Set directory permissions for Smarty"
        }, 
        {
            "location": "/configuration/introduction/", 
            "text": "The most important files that you will need to configure for your application are:\n\n\n\n\nconfigs/config.ini\n\n\nconfigs/url.ini\n\n\nroutes/web/en (can be another version/country)\n\n\n\n\nThat's all. It's not about writing configuration files but developing applications for the real world.\n\n\nAnd you won't need to run another application to make your application work.", 
            "title": "Introduction"
        }, 
        {
            "location": "/configuration/config.ini/", 
            "text": "This is where you will setup your application:\n\n\n\n\ndatabase connections\n\n\nmemcache\n\n\nsession handler\n\n\netc\n\n\n\n\nIt's a basic .ini file that can be read and written easily by any human. Definitely not a JSON or XML or even PHP which is worse of course.\n\n\nError display\n\n\nNote that the error level is of course set to E_ALL. \n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nerror.displayPHPErrors\n\n\noff\non\n\n\n(none)\n\n\nShould the application display the basic php errors (in dev environment you should set it to \"on\", and in production to \"off\"). The main exceptions will be catched, we are talking about the basic php errors like typos etc\n\n\n\n\n\n\nerror.displayMethod\n\n\nscreen\nforward\n\n\n(none)\n\n\nDisplay the errors on \"screen\" or within another controller/method (\"forward\") for friendly error reporting.\n\n\n\n\n\n\n\n\nError reporting\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nerror.forward.module\n\n\nhome\n\n\n(none)\n\n\nThe module to use when you forward errors.\n\n\n\n\n\n\nerror.forward.controller\n\n\nerror\n\n\n(none)\n\n\nThe controller to use in the specified module.\n\n\n\n\n\n\nerror.forward.action\n\n\nerror\n\n\n(none)\n\n\nThe action to call in the specified controller.\n\n\n\n\n\n\n\n\nNote that you should use forward most of the time in a real application so you can display a friendly error message, hide all the code from your users.\n\n\nError logging\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nerror.logger.class\n\n\n....\n\n\nSyslog/(none)\n\n\nThe class to instantiate for error logging.\n\n\n\n\n\n\n\n\nNoFussFramework will by default (no error logger specified) report the error to syslog so you will find the error in your apache2 error log (depending on your virtual host configuration).\n\n\nIf you want to customize error loggin, you can create a class in your \"models\" folder call, for example, \"Logger\", and specify in the config.ini:\n\n\nerror.logger.class=\\App\\Logger\n\n\n\n\nYou will need to create a method called \"log\", follow the example in Nf\\Error\\Logger\\Syslog.php.\n\n\nForbidden pages / logging / display\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nnotfound.forward.module\n\n\nhome\n\n\n(none)\n\n\nThe module to use when you forward from a forbidden access.\n\n\n\n\n\n\nnotfound.forward.controller\n\n\nerror\n\n\n(none)\n\n\nThe module to use.\n\n\n\n\n\n\nnotfound.forward.module\n\n\nnotfound\n\n\n(none)\n\n\nThe action to call.\n\n\n\n\n\n\n\n\nView engines\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nview.engine\n\n\nsmarty\nphp\n\n\nphp\n\n\nThe templating engine to use.\n\n\n\n\n\n\n\n\nSmarty was the obvious choice, along with php, because of the benchmarks of the latest versions on large templates.\n\n\nShould you use Twig or Blade, you will have to fork the view class. Note that we may add native support for these two template engines soon, or not, but a merge request will make us happy :)\n\n\nAll the other settings are optional\n\n\nYou can see the other configuration options in the next page!", 
            "title": "config.ini - app settings"
        }, 
        {
            "location": "/configuration/config.ini/#error-display", 
            "text": "Note that the error level is of course set to E_ALL.      Key  Values  Default  Explanation      error.displayPHPErrors  off on  (none)  Should the application display the basic php errors (in dev environment you should set it to \"on\", and in production to \"off\"). The main exceptions will be catched, we are talking about the basic php errors like typos etc    error.displayMethod  screen forward  (none)  Display the errors on \"screen\" or within another controller/method (\"forward\") for friendly error reporting.", 
            "title": "Error display"
        }, 
        {
            "location": "/configuration/config.ini/#error-reporting", 
            "text": "Key  Values  Default  Explanation      error.forward.module  home  (none)  The module to use when you forward errors.    error.forward.controller  error  (none)  The controller to use in the specified module.    error.forward.action  error  (none)  The action to call in the specified controller.     Note that you should use forward most of the time in a real application so you can display a friendly error message, hide all the code from your users.", 
            "title": "Error reporting"
        }, 
        {
            "location": "/configuration/config.ini/#error-logging", 
            "text": "Key  Values  Default  Explanation      error.logger.class  ....  Syslog/(none)  The class to instantiate for error logging.     NoFussFramework will by default (no error logger specified) report the error to syslog so you will find the error in your apache2 error log (depending on your virtual host configuration).  If you want to customize error loggin, you can create a class in your \"models\" folder call, for example, \"Logger\", and specify in the config.ini:  error.logger.class=\\App\\Logger  You will need to create a method called \"log\", follow the example in Nf\\Error\\Logger\\Syslog.php.", 
            "title": "Error logging"
        }, 
        {
            "location": "/configuration/config.ini/#forbidden-pages-logging-display", 
            "text": "Key  Values  Default  Explanation      notfound.forward.module  home  (none)  The module to use when you forward from a forbidden access.    notfound.forward.controller  error  (none)  The module to use.    notfound.forward.module  notfound  (none)  The action to call.", 
            "title": "Forbidden pages / logging / display"
        }, 
        {
            "location": "/configuration/config.ini/#view-engines", 
            "text": "Key  Values  Default  Explanation      view.engine  smarty php  php  The templating engine to use.     Smarty was the obvious choice, along with php, because of the benchmarks of the latest versions on large templates.  Should you use Twig or Blade, you will have to fork the view class. Note that we may add native support for these two template engines soon, or not, but a merge request will make us happy :)", 
            "title": "View engines"
        }, 
        {
            "location": "/configuration/config.ini/#all-the-other-settings-are-optional", 
            "text": "You can see the other configuration options in the next page!", 
            "title": "All the other settings are optional"
        }, 
        {
            "location": "/configuration/config.ini-optional/", 
            "text": "All of these settings are optional, but useful still ;)\n\n\nDefault module, controller, action (aka \"the home page\")\n\n\nThis is where you setup the default controller.\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nfront.default.module\n\n\n...\n\n\n(none)\n\n\nYou have to specify a default module, for example \"home\"\n\n\n\n\n\n\nfront.default.controller\n\n\n...\n\n\n(none)\n\n\nYou have to specify a default controller in the default module, for example \"index\"\n\n\n\n\n\n\nfront.default.action\n\n\n...\n\n\n(none)\n\n\nYou have to specify the default action, for example \"index\"\n\n\n\n\n\n\n\n\nIf you specify another route in your routes / _root.php file, the framework will use the latest route and not this config.ini entry.\n\n\nDatabase connection parameters\n\n\nAt this time, only mysql is supported. Just add these lines to the config.ini to define an adapter to a database. \n\n\nIn this example, it's called \nmydatabase\n. Replace with the name you want to use.\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\ndb.mydatabase.adapter\n\n\n\"Mysqli\" only\n\n\n(none)\n\n\nYou have to specify an adapter\n\n\n\n\n\n\ndb.mydatabase.params.database\n\n\nName of the database\n\n\n(none)\n\n\nThe database to use on the server\n\n\n\n\n\n\ndb.mydatabase.params.hostname\n\n\nHostname or IP of the server\n\n\n(none)\n\n\nThe server to connect to\n\n\n\n\n\n\ndb.mydatabase.params.username\n\n\nUsername\n\n\n(none)\n\n\nThe username to connect with\n\n\n\n\n\n\ndb.mydatabase.params.password\n\n\nPassword\n\n\n(none)\n\n\nThe password to use for connecting\n\n\n\n\n\n\ndb.mydatabase.params.charset=utf8\n\n\nThe name of the charset\n\n\n(none)\n\n\nYou should use utf-8 anyway :-)\n\n\n\n\n\n\n\n\nIn your code, you will get an instance of the db adapter by using :\n\n\n$db = \\Nf\\Db::getConnection('mydatabase');\n\n\n\n\nSession handler\n\n\nYou can set the session handler to :\n- nothing (just don't set the value or set an empty adapter)\n- mysqli (to store sessions in a table in a database adapter already defined in the config.ini)\n- memcache (to store sessions in memcache)\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nsession.handler\n\n\nmysqli\nmemcache\n\n\n(none)\n\n\nWhere do you want to store the sesions data\n\n\n\n\n\n\nsession.lifetime\n\n\n(seconds)\n\n\n(none)\n\n\nThe session lifetime in seconds\n\n\n\n\n\n\nsession.cookie.name\n\n\n(string)\n\n\n(none)\n\n\nName of the session cookie\n\n\n\n\n\n\nsession.cookie.domain\n\n\n(string\n\n\nblank)\n\n\nrequest's http domain\n\n\n\n\n\n\nsession.cookie.path=\n\n\n(string\n\n\n/)\n\n\n(none)\n\n\n\n\n\n\nsession.params.db_adapter\n\n\nname of the db adapter\n\n\n(none)\n\n\nIf you use a db store, set to the name of the db adapter to use\nIt's the same name of the adapter that you defined earlier in the config\n\n\n\n\n\n\nsession.params.db_table\n\n\n(string)\n\n\n(none)\n\n\nThe name of the table to store sessions (see the reference for the table's structure\n\n\n\n\n\n\n\n\nEnabling/disabling cache\n\n\nThis configuration parameter allows you to globally disable the cache handlers that you can use in your app. The default value is to cache.\n\n\nIf you set this to true, the framework will bypass the cache and return false on a \"get\" query, and returns true on a \"set\" query.  \n\n\nYou should disable the cache in a dev environment, but you can force it here.\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\ncache.enabled\n\n\nfalse\ntrue\n\n\ntrue\n\n\nEnable (true) or disable (false) the cache globally\n\n\n\n\n\n\n\n\nMultiple cache handlers\n\n\nWell of course, you can use only one or none. Just give the cache handler a name (for using it later in your models) and set the parameters for instanciating it.\n\n\nIn this example, we have one global cache, that is shared between the web servers, and another one that is exclusive to every server. The names \"global\" and \"local\" could be whatever you want.\n\n\ncache.global.handler=memcached\ncache.global.params.hosts=localhost\ncache.global.params.port=11211\ncache.global.lifetime=3600\n\ncache.local.handler=apc\n\n\n\n\nThe available settings ar described here, with the name \nmycache\n that can be whatever you want.\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\ncache.mycache.handler\n\n\nApc\nMemcached\n\n\n(n/a)\n\n\nChoose a cache adapter\n\n\n\n\n\n\ncache.global.lifetime\n\n\n(int)\n\n\n600\n\n\nEnter the default cache lifetime for any object\n\n\n\n\n\n\n\n\nFor Memcache:\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\ncache.global.params.hosts\n\n\nip/hostname\n\n\n(n/a)\n\n\nFor Memcache and multiple servers, separate the values with a comma (,)\n\n\n\n\n\n\ncache.global.params.port\n\n\n11211\nwhatever\n\n\n(none)\n\n\nFor Memcache, enter the port of the servers\n\n\n\n\n\n\n\n\nFor APC, you don't have anything to do.\n\n\nCache keys\n\n\nUsually in small apps, you store the name of the cache key for your models in constants of the classes. When you update your application, you don't want to get a conflict of data structure between what your new application expects and what the cache returns.\n\n\nThat's why every key in the datastore uses a pointer to the keys defined in the config.ini. For example:\n\n\n/* in your model, get the cache storage instance */\n$globalCache = \\Nf\\Cache::getStorage('global'); \n/* set the value if not already in cache: */\n$data = $globalCache-\nload('temperature', array('country' =\n 'france', 'city' =\n 'paris'));\n\n\n\n\nThe name of the cache key is dynamic and should be set in the config:\n\n\ncachekeys.temperature_citycode=temperature_[country]_[city]\n\n\n\n\nThe cache handler will remplace [country] and [city] by the actual values and will use the internal key \"temperature_france_paris\" for setting and getting the value from the cache store.\n\n\nFor a shorter code, you can also use a basic array or even just a string, like in these two examples. \n\n\nIf you have a small number of parameters and you are lazy, just send an array :\n\n\n$data = $globalCache-\nload('temperature', array('france', 'paris'));\n\n\n\n\nIf you have only one parameter in the key, like: temperature_[city]\n\n\n$data = $globalCache-\nload('temperature', 'paris');\n\n\n\n\nCache key prefix\n\n\nYou can prefix every key in your cache store(s), for example if you change a lot of structure in a new version of your application. \n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\ncache.keyPrefix=\n\n\n(string)\n\n\n(empty string)\n\n\nJust remember to make it compatible with your cache store. You can use v1, v2 or the name of your app if you share a memcache server with other applications.\n\n\n\n\n\n\n\n\nSecurity options\n\n\nYou can add there every other configuration you might need for your application like :\n\n\n\n\nyour CSS/less files to include in the head\n\n\nyour js files to include in the bottom of your pages\n\n\nan API key for using Google Cloud Services\n\n\nthe email recipient address for your contact form\n\n\nthe IP of your redis cluster servers\n\n\netc", 
            "title": "config.ini - optional settings"
        }, 
        {
            "location": "/configuration/config.ini-optional/#default-module-controller-action-aka-the-home-page", 
            "text": "This is where you setup the default controller.     Key  Values  Default  Explanation      front.default.module  ...  (none)  You have to specify a default module, for example \"home\"    front.default.controller  ...  (none)  You have to specify a default controller in the default module, for example \"index\"    front.default.action  ...  (none)  You have to specify the default action, for example \"index\"     If you specify another route in your routes / _root.php file, the framework will use the latest route and not this config.ini entry.", 
            "title": "Default module, controller, action (aka \"the home page\")"
        }, 
        {
            "location": "/configuration/config.ini-optional/#database-connection-parameters", 
            "text": "At this time, only mysql is supported. Just add these lines to the config.ini to define an adapter to a database.   In this example, it's called  mydatabase . Replace with the name you want to use.     Key  Values  Default  Explanation      db.mydatabase.adapter  \"Mysqli\" only  (none)  You have to specify an adapter    db.mydatabase.params.database  Name of the database  (none)  The database to use on the server    db.mydatabase.params.hostname  Hostname or IP of the server  (none)  The server to connect to    db.mydatabase.params.username  Username  (none)  The username to connect with    db.mydatabase.params.password  Password  (none)  The password to use for connecting    db.mydatabase.params.charset=utf8  The name of the charset  (none)  You should use utf-8 anyway :-)     In your code, you will get an instance of the db adapter by using :  $db = \\Nf\\Db::getConnection('mydatabase');", 
            "title": "Database connection parameters"
        }, 
        {
            "location": "/configuration/config.ini-optional/#session-handler", 
            "text": "You can set the session handler to :\n- nothing (just don't set the value or set an empty adapter)\n- mysqli (to store sessions in a table in a database adapter already defined in the config.ini)\n- memcache (to store sessions in memcache)     Key  Values  Default  Explanation      session.handler  mysqli memcache  (none)  Where do you want to store the sesions data    session.lifetime  (seconds)  (none)  The session lifetime in seconds    session.cookie.name  (string)  (none)  Name of the session cookie    session.cookie.domain  (string  blank)  request's http domain    session.cookie.path=  (string  /)  (none)    session.params.db_adapter  name of the db adapter  (none)  If you use a db store, set to the name of the db adapter to use It's the same name of the adapter that you defined earlier in the config    session.params.db_table  (string)  (none)  The name of the table to store sessions (see the reference for the table's structure", 
            "title": "Session handler"
        }, 
        {
            "location": "/configuration/config.ini-optional/#enablingdisabling-cache", 
            "text": "This configuration parameter allows you to globally disable the cache handlers that you can use in your app. The default value is to cache.  If you set this to true, the framework will bypass the cache and return false on a \"get\" query, and returns true on a \"set\" query.    You should disable the cache in a dev environment, but you can force it here.     Key  Values  Default  Explanation      cache.enabled  false true  true  Enable (true) or disable (false) the cache globally", 
            "title": "Enabling/disabling cache"
        }, 
        {
            "location": "/configuration/config.ini-optional/#multiple-cache-handlers", 
            "text": "Well of course, you can use only one or none. Just give the cache handler a name (for using it later in your models) and set the parameters for instanciating it.  In this example, we have one global cache, that is shared between the web servers, and another one that is exclusive to every server. The names \"global\" and \"local\" could be whatever you want.  cache.global.handler=memcached\ncache.global.params.hosts=localhost\ncache.global.params.port=11211\ncache.global.lifetime=3600\n\ncache.local.handler=apc  The available settings ar described here, with the name  mycache  that can be whatever you want.     Key  Values  Default  Explanation      cache.mycache.handler  Apc Memcached  (n/a)  Choose a cache adapter    cache.global.lifetime  (int)  600  Enter the default cache lifetime for any object     For Memcache:     Key  Values  Default  Explanation      cache.global.params.hosts  ip/hostname  (n/a)  For Memcache and multiple servers, separate the values with a comma (,)    cache.global.params.port  11211 whatever  (none)  For Memcache, enter the port of the servers     For APC, you don't have anything to do.", 
            "title": "Multiple cache handlers"
        }, 
        {
            "location": "/configuration/config.ini-optional/#cache-keys", 
            "text": "Usually in small apps, you store the name of the cache key for your models in constants of the classes. When you update your application, you don't want to get a conflict of data structure between what your new application expects and what the cache returns.  That's why every key in the datastore uses a pointer to the keys defined in the config.ini. For example:  /* in your model, get the cache storage instance */\n$globalCache = \\Nf\\Cache::getStorage('global'); \n/* set the value if not already in cache: */\n$data = $globalCache- load('temperature', array('country' =  'france', 'city' =  'paris'));  The name of the cache key is dynamic and should be set in the config:  cachekeys.temperature_citycode=temperature_[country]_[city]  The cache handler will remplace [country] and [city] by the actual values and will use the internal key \"temperature_france_paris\" for setting and getting the value from the cache store.  For a shorter code, you can also use a basic array or even just a string, like in these two examples.   If you have a small number of parameters and you are lazy, just send an array :  $data = $globalCache- load('temperature', array('france', 'paris'));  If you have only one parameter in the key, like: temperature_[city]  $data = $globalCache- load('temperature', 'paris');", 
            "title": "Cache keys"
        }, 
        {
            "location": "/configuration/config.ini-optional/#cache-key-prefix", 
            "text": "You can prefix every key in your cache store(s), for example if you change a lot of structure in a new version of your application.      Key  Values  Default  Explanation      cache.keyPrefix=  (string)  (empty string)  Just remember to make it compatible with your cache store. You can use v1, v2 or the name of your app if you share a memcache server with other applications.", 
            "title": "Cache key prefix"
        }, 
        {
            "location": "/configuration/config.ini-optional/#security-options", 
            "text": "You can add there every other configuration you might need for your application like :   your CSS/less files to include in the head  your js files to include in the bottom of your pages  an API key for using Google Cloud Services  the email recipient address for your contact form  the IP of your redis cluster servers  etc", 
            "title": "Security options"
        }, 
        {
            "location": "/configuration/url.ini/", 
            "text": "wip", 
            "title": "url.ini"
        }, 
        {
            "location": "/configuration/routes/", 
            "text": "wip", 
            "title": "routes"
        }, 
        {
            "location": "/reference/sessions-table/", 
            "text": "The Mysqli session handler expects this structure for the sessions table :\n\n\nThis example uses the name \"sessions\", but you can name how you want, just set it up in your config.ini.\n\n\nAlso, you can use the storage engine that you want, InnoDB, MyISAM, memory, whatever.\n\n\nCREATE TABLE `sessions` (\n  `id` varchar(32) COLLATE utf8_bin NOT NULL,\n  `modified` timestamp NULL DEFAULT NULL,\n  `lifetime` int(11) DEFAULT NULL,\n  `data` text COLLATE utf8_bin,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;", 
            "title": "sessions table structure"
        }
    ]
}