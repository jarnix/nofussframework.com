{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the documentation pages of NoFussFramework.\n\n\nWhat about a \nlittle introduction\n?\n\n\nIf you want to try it on your computer, \nthere's an app for that\n.\n\n\nLooking for the API documentation? It's being written, be patient :(", 
            "title": "Documentation Home"
        }, 
        {
            "location": "/intro/introduction/", 
            "text": "What can you expect from NoFussFramework\n\n\nA short learning curve\n\n\nNoFussFramework was designed to be easy to use. There's no magic behind.\nAlso, though being a little bit opinionated, you can extend it easily.\n\n\nA complete MVC without all the fuss\n\n\nThe main reason for building the project was that we cannot find a performant yet useful framework to work on for our projects. Micro frameworks are way too limited for being used in a few environments where you have a lot of developers working on multiple projects. Big and fat frameworks like Symfony or Zend or Laravel have a long learning curve, have below-than-average performances so they are not usable on large websites without using a lot of servers. We also believe that we cannot build everything better than the others ;) so it will be up to you to include other php libraries for like creating pdf, connecting to an outdated SOAP api, etc.     \n\n\nPerformance oriented\n\n\nNoFussFramework is an MVC framework that will help you build small or large applications with performance in mind.\n\n\nDesigned for web or cli applications, and multiple languages\n\n\nYou can use the same code for multiple languages, the framework will tell you using the url or a cookie which locale/language to use.\n\n\nThe same rule applies for multiple versions, like a web version, a mobile/tablet/watch version, a cli console. You can even redirect to another URL if you want to have another application for your mobile/tablet application.  \n\n\nDesigned for large applications (or small)\n\n\nThe application is divided into modules (for example \"user\"), and controllers (for example, \"profile\") and actions (for example, \"updatePicture\").\n\n\nThe views are also separated into modules so you won't have 100 templates in the same folder, although you can however put them in the same folder and use common folders for like the header, footer, etc. \n\n\nWhat you will miss, or not\n\n\nObviously, NoFussFramework was not designed to do everything of what you can expect from a fat framework like Symfony or Zend Framework. For example, it doesn't handle user login, this task should be performed specifically by your code for your project, it's not included since there are a lot of different ways to authenticate/register a user. \n\n\nA few benchmarks\n\n\nWhen you have an \"hello world\" in 200 ms on an average small server on other frameworks (laravel, symfony, zend 2...), NoFussFramework will say \"hello world\" within 15 ms maximum after routing, session handling etc.\n\n\nNoFussFramework is really efficient in CPU and memory usage, leveraging basic technologies like lazy loading, limiting the number of files, etc. And a constant benchmarking while developing it to fix the bottlenecks.", 
            "title": "Introduction"
        }, 
        {
            "location": "/intro/introduction/#what-can-you-expect-from-nofussframework", 
            "text": "", 
            "title": "What can you expect from NoFussFramework"
        }, 
        {
            "location": "/intro/introduction/#a-short-learning-curve", 
            "text": "NoFussFramework was designed to be easy to use. There's no magic behind. Also, though being a little bit opinionated, you can extend it easily.", 
            "title": "A short learning curve"
        }, 
        {
            "location": "/intro/introduction/#a-complete-mvc-without-all-the-fuss", 
            "text": "The main reason for building the project was that we cannot find a performant yet useful framework to work on for our projects. Micro frameworks are way too limited for being used in a few environments where you have a lot of developers working on multiple projects. Big and fat frameworks like Symfony or Zend or Laravel have a long learning curve, have below-than-average performances so they are not usable on large websites without using a lot of servers. We also believe that we cannot build everything better than the others ;) so it will be up to you to include other php libraries for like creating pdf, connecting to an outdated SOAP api, etc.", 
            "title": "A complete MVC without all the fuss"
        }, 
        {
            "location": "/intro/introduction/#performance-oriented", 
            "text": "NoFussFramework is an MVC framework that will help you build small or large applications with performance in mind.", 
            "title": "Performance oriented"
        }, 
        {
            "location": "/intro/introduction/#designed-for-web-or-cli-applications-and-multiple-languages", 
            "text": "You can use the same code for multiple languages, the framework will tell you using the url or a cookie which locale/language to use.  The same rule applies for multiple versions, like a web version, a mobile/tablet/watch version, a cli console. You can even redirect to another URL if you want to have another application for your mobile/tablet application.", 
            "title": "Designed for web or cli applications, and multiple languages"
        }, 
        {
            "location": "/intro/introduction/#designed-for-large-applications-or-small", 
            "text": "The application is divided into modules (for example \"user\"), and controllers (for example, \"profile\") and actions (for example, \"updatePicture\").  The views are also separated into modules so you won't have 100 templates in the same folder, although you can however put them in the same folder and use common folders for like the header, footer, etc.", 
            "title": "Designed for large applications (or small)"
        }, 
        {
            "location": "/intro/introduction/#what-you-will-miss-or-not", 
            "text": "Obviously, NoFussFramework was not designed to do everything of what you can expect from a fat framework like Symfony or Zend Framework. For example, it doesn't handle user login, this task should be performed specifically by your code for your project, it's not included since there are a lot of different ways to authenticate/register a user.", 
            "title": "What you will miss, or not"
        }, 
        {
            "location": "/intro/introduction/#a-few-benchmarks", 
            "text": "When you have an \"hello world\" in 200 ms on an average small server on other frameworks (laravel, symfony, zend 2...), NoFussFramework will say \"hello world\" within 15 ms maximum after routing, session handling etc.  NoFussFramework is really efficient in CPU and memory usage, leveraging basic technologies like lazy loading, limiting the number of files, etc. And a constant benchmarking while developing it to fix the bottlenecks.", 
            "title": "A few benchmarks"
        }, 
        {
            "location": "/setup/try-it-now/", 
            "text": "Try it now with Vagrant\n\n\nSince we are so kind with you, we built a VM which you can play with, so you can get on board quickly.\n\n\nThe VM contains the same code as in the github repository but also a preconfigured apache + php + mysql + memcache + apcu, and some php extensions that you can use at the beginning.\n\n\nVagrant setup\n\n\nIf you don't have Vagrant on your computer, download it from here:\n\n\nhttps://www.vagrantup.com/downloads.html\n\n\nVirtualbox setup\n\n\nThe image for Vagrant uses Virtualbox. Download it from here:\n\n\nhttps://www.virtualbox.org/wiki/Downloads\n\n\nStart the vm with NoFussFramework:\n\n\nDownload the Vagrant settings for our image. Go into your home folder for example and clone this git repository:\n\n\ngit clone https://github.com/jarnix/nofussvagrant.git\n\n\n\nThen go into the nofussvagrant directory and start the VM with:\n\n\nvagrant up\n\n\n\nThe first time it will take a few minutes to download the image of the VM.\n\n\nOpen your browser:\n\n\nhttp://localhost:8888\n\n\n\nModify the sources in the VM:\n\n\nvagrant ssh\n\n\n\nThe files are located in /var/www/nofuss/demosite", 
            "title": "Try it now"
        }, 
        {
            "location": "/setup/try-it-now/#try-it-now-with-vagrant", 
            "text": "Since we are so kind with you, we built a VM which you can play with, so you can get on board quickly.  The VM contains the same code as in the github repository but also a preconfigured apache + php + mysql + memcache + apcu, and some php extensions that you can use at the beginning.", 
            "title": "Try it now with Vagrant"
        }, 
        {
            "location": "/setup/try-it-now/#vagrant-setup", 
            "text": "If you don't have Vagrant on your computer, download it from here:  https://www.vagrantup.com/downloads.html", 
            "title": "Vagrant setup"
        }, 
        {
            "location": "/setup/try-it-now/#virtualbox-setup", 
            "text": "The image for Vagrant uses Virtualbox. Download it from here:  https://www.virtualbox.org/wiki/Downloads", 
            "title": "Virtualbox setup"
        }, 
        {
            "location": "/setup/try-it-now/#start-the-vm-with-nofussframework", 
            "text": "Download the Vagrant settings for our image. Go into your home folder for example and clone this git repository:  git clone https://github.com/jarnix/nofussvagrant.git  Then go into the nofussvagrant directory and start the VM with:  vagrant up  The first time it will take a few minutes to download the image of the VM.  Open your browser:  http://localhost:8888", 
            "title": "Start the vm with NoFussFramework:"
        }, 
        {
            "location": "/setup/try-it-now/#modify-the-sources-in-the-vm", 
            "text": "vagrant ssh  The files are located in /var/www/nofuss/demosite", 
            "title": "Modify the sources in the VM:"
        }, 
        {
            "location": "/setup/requirements/", 
            "text": "In the default installation for a website, you will need apache2 and php5. Of course, you can also use another webserver like nginx and another php engine than apache's mod-php. \n\n\nApache2\n\n\n\n\nmod_rewrite  \n\n\n\n\nPHP \n= 5.3\n\n\n\n\nphp5-intl\n\n\nphp5-mcrypt\n\n\n\n\nThe other extensions are optional and the framework won't crash (as in GTA 5).\n\n\nIf you want to connect to a mysql database:\n\n\n\n\nphp5-mysqli\n\n\n\n\nIf you want to use memcache (as session store or cache store), this extension will be necessary:\n\n\n\n\nphp5-memcache\n\n\n\n\nIf you want to use the image functions:\n\n\n\n\nphp5-imagick", 
            "title": "Requirements"
        }, 
        {
            "location": "/setup/requirements/#apache2", 
            "text": "mod_rewrite", 
            "title": "Apache2"
        }, 
        {
            "location": "/setup/requirements/#php-53", 
            "text": "php5-intl  php5-mcrypt   The other extensions are optional and the framework won't crash (as in GTA 5).  If you want to connect to a mysql database:   php5-mysqli   If you want to use memcache (as session store or cache store), this extension will be necessary:   php5-memcache   If you want to use the image functions:   php5-imagick", 
            "title": "PHP &gt;= 5.3"
        }, 
        {
            "location": "/setup/installation/", 
            "text": "In this tutorial, we assume that your web root is /var/www and that you can create files in this folder. \n\n\nGet NoFussFramework on your server\n\n\ncd /var/www\ngit clone https://github.com/jarnix/nofuss.git\ncd nofuss\n\n\n\nYou will see 3 directories:\n\n\n\n\ndemosite, which is a \"hello world\" that you can modify freely\n\n\nemptysite, which should be your skeleton when building a new application with NoFussFramework\n\n\nlibrary: the folder containing the framework and where you can put different classes used by your application(s)\n\n\n\n\nSetup an apache virtual site\n\n\nWe will name our virtual site \"nofuss1\".\n\n\nBeware, this configuration is really small and not so secure (\"AllowOverride All\").\n\n\ncd /etc/apache2/sites-available\nnano nofuss1\n\n\n\nCopy these lines and adjust according to your server's configuration.\n\n\nVirtualHost *:80\n\n    ServerAdmin webmaster@localhost\n\n    DocumentRoot /var/www/nofuss/demosite/html\n    \nDirectory /\n\n            Options FollowSymLinks\n            AllowOverride All\n    \n/Directory\n\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n\n    LogLevel warn\n\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n/VirtualHost\n\n\n\n\n\nWrite and exit (ctrl+o, ctrl+x).\n\n\nEnable the website :\n\n\na2ensite nofuss1\n\n\n\nOptional: get Smarty\n\n\nif you want to use Smarty as the template engine for your application, you have to download the latest version:\n\n\ncd /usr/local/src\nwget http://www.smarty.net/files/Smarty-3.1.21.tar.gz\ntar -xvzf Smarty-3.1.21.tar.gz\ncd Smarty-3.1.21\nmv libs /var/www/nofuss/library/php/classes/Smarty\n\n\n\nSet directory permissions for Smarty\n\n\nIf you are going to use Smarty, you will need to allow the apache \"www-data\" user to write the compiled templates in his templates_c folder:\n\n\nchown -R www-data.www-data /var/www/nofuss/demosite/cache/templates_c\n\n\n\nAnd you're good to go.", 
            "title": "Installation"
        }, 
        {
            "location": "/setup/installation/#get-nofussframework-on-your-server", 
            "text": "cd /var/www\ngit clone https://github.com/jarnix/nofuss.git\ncd nofuss  You will see 3 directories:   demosite, which is a \"hello world\" that you can modify freely  emptysite, which should be your skeleton when building a new application with NoFussFramework  library: the folder containing the framework and where you can put different classes used by your application(s)", 
            "title": "Get NoFussFramework on your server"
        }, 
        {
            "location": "/setup/installation/#setup-an-apache-virtual-site", 
            "text": "We will name our virtual site \"nofuss1\".  Beware, this configuration is really small and not so secure (\"AllowOverride All\").  cd /etc/apache2/sites-available\nnano nofuss1  Copy these lines and adjust according to your server's configuration.  VirtualHost *:80 \n    ServerAdmin webmaster@localhost\n\n    DocumentRoot /var/www/nofuss/demosite/html\n     Directory / \n            Options FollowSymLinks\n            AllowOverride All\n     /Directory \n    ErrorLog ${APACHE_LOG_DIR}/error.log\n\n    LogLevel warn\n\n    CustomLog ${APACHE_LOG_DIR}/access.log combined /VirtualHost   Write and exit (ctrl+o, ctrl+x).  Enable the website :  a2ensite nofuss1", 
            "title": "Setup an apache virtual site"
        }, 
        {
            "location": "/setup/installation/#optional-get-smarty", 
            "text": "if you want to use Smarty as the template engine for your application, you have to download the latest version:  cd /usr/local/src\nwget http://www.smarty.net/files/Smarty-3.1.21.tar.gz\ntar -xvzf Smarty-3.1.21.tar.gz\ncd Smarty-3.1.21\nmv libs /var/www/nofuss/library/php/classes/Smarty", 
            "title": "Optional: get Smarty"
        }, 
        {
            "location": "/setup/installation/#set-directory-permissions-for-smarty", 
            "text": "If you are going to use Smarty, you will need to allow the apache \"www-data\" user to write the compiled templates in his templates_c folder:  chown -R www-data.www-data /var/www/nofuss/demosite/cache/templates_c  And you're good to go.", 
            "title": "Set directory permissions for Smarty"
        }, 
        {
            "location": "/configuration/introduction/", 
            "text": "The most important files that you will need to configure for your application are:\n\n\n\n\nconfigs/config.ini\n\n\nconfigs/url.ini\n\n\nroutes/web/en (can be another version/country)\n\n\n\n\nThat's all. It's not about writing configuration files but developing applications for the real world.\n\n\nAnd you won't need to run another application to make your application work.", 
            "title": "Introduction"
        }, 
        {
            "location": "/configuration/overview/", 
            "text": "Overview on how you can use the framework and how the framework works\n\n\nEnvironments, versions, languages\n\n\nTODO", 
            "title": "Overview"
        }, 
        {
            "location": "/configuration/overview/#environments-versions-languages", 
            "text": "TODO", 
            "title": "Environments, versions, languages"
        }, 
        {
            "location": "/configuration/config.ini/", 
            "text": "This is where you will setup your application:\n\n\n\n\ndatabase connections\n\n\nmemcache\n\n\nsession handler\n\n\netc\n\n\n\n\nIt's a basic .ini file that can be read and written easily by any human. Definitely not a JSON or XML or even PHP which is worse of course.\n\n\nError display\n\n\nNote that the error level is of course set to E_ALL. \n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nerror.displayPHPErrors\n\n\noff\non\n\n\n(none)\n\n\nShould the application display the basic php errors (in dev environment you should set it to \"on\", and in production to \"off\"). The main exceptions will be catched, we are talking about the basic php errors like typos etc\n\n\n\n\n\n\nerror.displayMethod\n\n\nscreen\nforward\n\n\n(none)\n\n\nDisplay the errors on \"screen\" or within another controller/method (\"forward\") for friendly error reporting.\n\n\n\n\n\n\nerror.clearResponse\n\n\nfalse\ntrue\n\n\nfalse\n\n\nShould the application clean the response before displaying the error\n\n\n\n\n\n\n\n\nError reporting\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nerror.forward.module\n\n\nhome\n\n\n(none)\n\n\nThe module to use when you forward errors.\n\n\n\n\n\n\nerror.forward.controller\n\n\nerror\n\n\n(none)\n\n\nThe controller to use in the specified module.\n\n\n\n\n\n\nerror.forward.action\n\n\nerror\n\n\n(none)\n\n\nThe action to call in the specified controller.\n\n\n\n\n\n\n\n\nNote that you should use forward most of the time in a real application so you can display a friendly error message, and hide all the debug trace from your users.\n\n\nError logging\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nerror.logger.class\n\n\n....\n\n\nSyslog/(none)\n\n\nThe class to instantiate for error logging.\n\n\n\n\n\n\n\n\nNoFussFramework will by default (no error logger specified) report the error to syslog so you will find the error in your apache2 error log (depending on your virtual host configuration).\n\n\nIf you want to customize error loggin, you can create a class in your \"models\" folder call, for example, \"Logger\", and specify in the config.ini:\n\n\nerror.logger.class=\\App\\Logger\n\n\n\n\nYou will need to create a method called \"log\", follow the example in Nf\\Error\\Logger\\Syslog.php.\n\n\nForbidden pages / logging / display\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nnotfound.forward.module\n\n\nhome\n\n\n(none)\n\n\nThe module to use when you forward from a forbidden access.\n\n\n\n\n\n\nnotfound.forward.controller\n\n\nerror\n\n\n(none)\n\n\nThe module to use.\n\n\n\n\n\n\nnotfound.forward.module\n\n\nnotfound\n\n\n(none)\n\n\nThe action to call.\n\n\n\n\n\n\n\n\nYou should also see the \nintegrated http statuses codes\n that are integrated in the framework in the references.\n\n\nView engines\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nview.engine\n\n\nsmarty\nphp\n\n\nphp\n\n\nThe templating engine to use.\n\n\n\n\n\n\n\n\nSmarty was the obvious choice, along with php, because of the benchmarks of the latest versions on large templates.\n\n\nShould you use Twig or Blade, you will have to fork the view class. Note that we may add native support for these two template engines soon, or not, but a merge request will make us happy :)\n\n\nAll the other settings are optional\n\n\nYou can see the other configuration options in the next page!", 
            "title": "config.ini - app settings"
        }, 
        {
            "location": "/configuration/config.ini/#error-display", 
            "text": "Note that the error level is of course set to E_ALL.      Key  Values  Default  Explanation      error.displayPHPErrors  off on  (none)  Should the application display the basic php errors (in dev environment you should set it to \"on\", and in production to \"off\"). The main exceptions will be catched, we are talking about the basic php errors like typos etc    error.displayMethod  screen forward  (none)  Display the errors on \"screen\" or within another controller/method (\"forward\") for friendly error reporting.    error.clearResponse  false true  false  Should the application clean the response before displaying the error", 
            "title": "Error display"
        }, 
        {
            "location": "/configuration/config.ini/#error-reporting", 
            "text": "Key  Values  Default  Explanation      error.forward.module  home  (none)  The module to use when you forward errors.    error.forward.controller  error  (none)  The controller to use in the specified module.    error.forward.action  error  (none)  The action to call in the specified controller.     Note that you should use forward most of the time in a real application so you can display a friendly error message, and hide all the debug trace from your users.", 
            "title": "Error reporting"
        }, 
        {
            "location": "/configuration/config.ini/#error-logging", 
            "text": "Key  Values  Default  Explanation      error.logger.class  ....  Syslog/(none)  The class to instantiate for error logging.     NoFussFramework will by default (no error logger specified) report the error to syslog so you will find the error in your apache2 error log (depending on your virtual host configuration).  If you want to customize error loggin, you can create a class in your \"models\" folder call, for example, \"Logger\", and specify in the config.ini:  error.logger.class=\\App\\Logger  You will need to create a method called \"log\", follow the example in Nf\\Error\\Logger\\Syslog.php.", 
            "title": "Error logging"
        }, 
        {
            "location": "/configuration/config.ini/#forbidden-pages-logging-display", 
            "text": "Key  Values  Default  Explanation      notfound.forward.module  home  (none)  The module to use when you forward from a forbidden access.    notfound.forward.controller  error  (none)  The module to use.    notfound.forward.module  notfound  (none)  The action to call.     You should also see the  integrated http statuses codes  that are integrated in the framework in the references.", 
            "title": "Forbidden pages / logging / display"
        }, 
        {
            "location": "/configuration/config.ini/#view-engines", 
            "text": "Key  Values  Default  Explanation      view.engine  smarty php  php  The templating engine to use.     Smarty was the obvious choice, along with php, because of the benchmarks of the latest versions on large templates.  Should you use Twig or Blade, you will have to fork the view class. Note that we may add native support for these two template engines soon, or not, but a merge request will make us happy :)", 
            "title": "View engines"
        }, 
        {
            "location": "/configuration/config.ini/#all-the-other-settings-are-optional", 
            "text": "You can see the other configuration options in the next page!", 
            "title": "All the other settings are optional"
        }, 
        {
            "location": "/configuration/config.ini-optional/", 
            "text": "All of these settings are optional, but useful still ;)\n\n\nDefault module, controller, action (aka \"the home page\")\n\n\nThis is where you setup the default controller.\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nfront.default.module\n\n\n...\n\n\n(none)\n\n\nYou have to specify a default module, for example \"home\"\n\n\n\n\n\n\nfront.default.controller\n\n\n...\n\n\n(none)\n\n\nYou have to specify a default controller in the default module, for example \"index\"\n\n\n\n\n\n\nfront.default.action\n\n\n...\n\n\n(none)\n\n\nYou have to specify the default action, for example \"index\"\n\n\n\n\n\n\n\n\nIf you specify another route in your routes / _root.php file, the framework will use the latest route and not this config.ini entry.\n\n\nTrailing slash optional removal\n\n\nDo we want a trailing slash (nofussframework will redirect if the url is incorrect)\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\ntrailingSlash.needed\n\n\nfalse\ntrue\n\n\nfalse\n\n\nShould the urls be terminated with a trailing /\n\n\n\n\n\n\n\n\nThis option should be set to false if you don't want a trailing slash. Some people like them. I don't know why. WTF.\n\n\nDatabase connection parameters\n\n\nAt this time, only mysql is supported. Just add these lines to the config.ini to define an adapter to a database. \n\n\nIn this example, it's called \nmydatabase\n. Replace with the name you want to use.\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\ndb.mydatabase.adapter\n\n\n\"Mysqli\" only\n\n\n(none)\n\n\nYou have to specify an adapter\n\n\n\n\n\n\ndb.mydatabase.params.database\n\n\nName of the database\n\n\n(none)\n\n\nThe database to use on the server\n\n\n\n\n\n\ndb.mydatabase.params.hostname\n\n\nHostname or IP of the server\n\n\n(none)\n\n\nThe server to connect to\n\n\n\n\n\n\ndb.mydatabase.params.username\n\n\nUsername\n\n\n(none)\n\n\nThe username to connect with\n\n\n\n\n\n\ndb.mydatabase.params.password\n\n\nPassword\n\n\n(none)\n\n\nThe password to use for connecting\n\n\n\n\n\n\ndb.mydatabase.params.charset=utf8\n\n\nThe name of the charset\n\n\n(none)\n\n\nYou should use utf-8 anyway :-)\n\n\n\n\n\n\n\n\nIn your code, you will get an instance of the db adapter by using :\n\n\n$db = \\Nf\\Db::getConnection('mydatabase');\n\n\n\n\nSession handler\n\n\nYou can set the session handler to :\n- nothing (just don't set the value or set an empty adapter)\n- mysqli (to store sessions in a table in a database adapter already defined in the config.ini)\n- memcache (to store sessions in memcache)\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nsession.handler\n\n\nmysqli\nmemcache\n\n\n(none)\n\n\nWhere do you want to store the sesions data\n\n\n\n\n\n\nsession.lifetime\n\n\n(seconds)\n\n\n(none)\n\n\nThe session lifetime in seconds\n\n\n\n\n\n\nsession.cookie.name\n\n\n(string)\n\n\n(none)\n\n\nName of the session cookie\n\n\n\n\n\n\nsession.cookie.domain\n\n\n(string\n\n\nblank)\n\n\nrequest's http domain\n\n\n\n\n\n\nsession.cookie.path=\n\n\n(string\n\n\n/)\n\n\n(none)\n\n\n\n\n\n\nsession.params.db_adapter\n\n\nname of the db adapter\n\n\n(none)\n\n\nIf you use a db store, set to the name of the db adapter to use\nIt's the same name of the adapter that you defined earlier in the config\n\n\n\n\n\n\nsession.params.db_table\n\n\n(string)\n\n\n(none)\n\n\nThe name of the table to store sessions (see the reference for the table's structure\n\n\n\n\n\n\n\n\nEnabling/disabling cache\n\n\nThis configuration parameter allows you to globally disable the cache handlers that you can use in your app. The default value is to cache.\n\n\nIf you set this to true, the framework will bypass the cache and return false on a \"get\" query, and returns true on a \"set\" query.  \n\n\nYou should disable the cache in a dev environment, but you can force it here.\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\ncache.enabled\n\n\nfalse\ntrue\n\n\ntrue\n\n\nEnable (true) or disable (false) the cache globally\n\n\n\n\n\n\n\n\nMultiple cache handlers\n\n\nWell of course, you can use only one or none. Just give the cache handler a name (for using it later in your models) and set the parameters for instanciating it.\n\n\nIn this example, we have one global cache, that is shared between the web servers, and another one that is exclusive to every server. The names \"global\" and \"local\" could be whatever you want.\n\n\ncache.global.handler=memcached\ncache.global.params.hosts=localhost\ncache.global.params.port=11211\ncache.global.lifetime=3600\n\ncache.local.handler=apc\n\n\n\n\nThe available settings ar described here, with the name \nmycache\n that can be whatever you want.\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\ncache.mycache.handler\n\n\nApc\nMemcached\n\n\n(n/a)\n\n\nChoose a cache adapter\n\n\n\n\n\n\ncache.global.lifetime\n\n\n(int)\n\n\n600\n\n\nEnter the default cache lifetime for any object\n\n\n\n\n\n\n\n\nFor Memcache:\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\ncache.global.params.hosts\n\n\nip/hostname\n\n\n(n/a)\n\n\nFor Memcache and multiple servers, separate the values with a comma (,)\n\n\n\n\n\n\ncache.global.params.port\n\n\n11211\nwhatever\n\n\n(none)\n\n\nFor Memcache, enter the port of the servers\n\n\n\n\n\n\n\n\nFor APC, you don't have anything to do.\n\n\nCache keys\n\n\nUsually in small apps, you store the name of the cache key for your models in constants of the classes. When you update your application, you don't want to get a conflict of data structure between what your new application expects and what the cache returns.\n\n\nThat's why every key in the datastore uses a pointer to the keys defined in the config.ini. For example:\n\n\n/* in your model, get the cache storage instance */\n$globalCache = \\Nf\\Cache::getStorage('global'); \n/* set the value if not already in cache: */\n$data = $globalCache-\nload('temperature', array('country' =\n 'france', 'city' =\n 'paris'));\n\n\n\n\nThe name of the cache key is dynamic and should be set in the config:\n\n\ncachekeys.temperature_citycode=temperature_[country]_[city]\n\n\n\n\nThe cache handler will remplace [country] and [city] by the actual values and will use the internal key \"temperature_france_paris\" for setting and getting the value from the cache store.\n\n\nFor a shorter code, you can also use a basic array or even just a string, like in these two examples. \n\n\nIf you have a small number of parameters and you are lazy, just send an array :\n\n\n$data = $globalCache-\nload('temperature', array('france', 'paris'));\n\n\n\n\nIf you have only one parameter in the key, like: temperature_[city]\n\n\n$data = $globalCache-\nload('temperature', 'paris');\n\n\n\n\nCache key prefix\n\n\nYou can prefix every key in your cache store(s), for example if you change a lot of structure in a new version of your application. You should also prefix the keys when you are using the same cache store for multiple applications.\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\ncache.keyPrefix=\n\n\n(string)\n\n\n(empty string)\n\n\nJust remember to make it compatible with your cache store. You can use v1, v2 or the name of your app if you share a memcache server with other applications.\n\n\n\n\n\n\n\n\nSecurity options\n\n\nSecurity should be implemented in your application, these options are just here to help.\n\n\nEnable CORS\n\n\n\n\n\n\n\n\nKey\n\n\nValues\n\n\nDefault\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nsecurity.cors.enable\n\n\ntrue\nfalse\n\n\nfalse\n\n\nEnables the integrated CORS handler\n\n\n\n\n\n\nsecurity.cors.allowed_origins\n\n\n(string)\n\n\n\"*\"\n\n\nSet the allowed origins or let the code handle it (\"*\" also adds the referer for making it compatible with some browsers that expect it, like Chrome)\n\n\n\n\n\n\nsecurity.cors.allowed_methods\n\n\n(string http methods comma-separated)\n\n\n\"GET, POST, DELETE, PUT, PATCH, OPTIONS\"\n\n\nUsually you app will handle the allowed routes and operations, you can leave the default values\n\n\n\n\n\n\nsecurity.cors.allowed_credentials\n\n\ntrue\nfalse\n\n\ntrue\n\n\nAdds a header Access-Control-Allow-Credentials:true\n\n\n\n\n\n\nsecurity.cors.allowed_headers\n\n\n(strings, comma-separated)\n\n\n\"authorization\"\n\n\nUsually you might need to set this value to \"authorization, content-type\"\n\n\n\n\n\n\nsecurity.cors.max_age\n\n\ninteger\n\n\n86400\n\n\nnumber of seconds to remember the allowed route\n\n\n\n\n\n\n\n\n\n\nYou can add there every other configuration you might need for your application like :\n\n\n\n\nyour CSS/less files to include in the head\n\n\nyour js files to include (in the bottom of your pages obviously)\n\n\nan API key for using Google Cloud Services\n\n\nthe email recipient address for your contact form\n\n\nthe IP of your redis cluster servers\n\n\netc\n\n\n\n\nLearn how to create a useful config.ini\n\n\nLet's go the next page!", 
            "title": "config.ini - optional settings"
        }, 
        {
            "location": "/configuration/config.ini-optional/#default-module-controller-action-aka-the-home-page", 
            "text": "This is where you setup the default controller.     Key  Values  Default  Explanation      front.default.module  ...  (none)  You have to specify a default module, for example \"home\"    front.default.controller  ...  (none)  You have to specify a default controller in the default module, for example \"index\"    front.default.action  ...  (none)  You have to specify the default action, for example \"index\"     If you specify another route in your routes / _root.php file, the framework will use the latest route and not this config.ini entry.", 
            "title": "Default module, controller, action (aka \"the home page\")"
        }, 
        {
            "location": "/configuration/config.ini-optional/#trailing-slash-optional-removal", 
            "text": "Do we want a trailing slash (nofussframework will redirect if the url is incorrect)     Key  Values  Default  Explanation      trailingSlash.needed  false true  false  Should the urls be terminated with a trailing /     This option should be set to false if you don't want a trailing slash. Some people like them. I don't know why. WTF.", 
            "title": "Trailing slash optional removal"
        }, 
        {
            "location": "/configuration/config.ini-optional/#database-connection-parameters", 
            "text": "At this time, only mysql is supported. Just add these lines to the config.ini to define an adapter to a database.   In this example, it's called  mydatabase . Replace with the name you want to use.     Key  Values  Default  Explanation      db.mydatabase.adapter  \"Mysqli\" only  (none)  You have to specify an adapter    db.mydatabase.params.database  Name of the database  (none)  The database to use on the server    db.mydatabase.params.hostname  Hostname or IP of the server  (none)  The server to connect to    db.mydatabase.params.username  Username  (none)  The username to connect with    db.mydatabase.params.password  Password  (none)  The password to use for connecting    db.mydatabase.params.charset=utf8  The name of the charset  (none)  You should use utf-8 anyway :-)     In your code, you will get an instance of the db adapter by using :  $db = \\Nf\\Db::getConnection('mydatabase');", 
            "title": "Database connection parameters"
        }, 
        {
            "location": "/configuration/config.ini-optional/#session-handler", 
            "text": "You can set the session handler to :\n- nothing (just don't set the value or set an empty adapter)\n- mysqli (to store sessions in a table in a database adapter already defined in the config.ini)\n- memcache (to store sessions in memcache)     Key  Values  Default  Explanation      session.handler  mysqli memcache  (none)  Where do you want to store the sesions data    session.lifetime  (seconds)  (none)  The session lifetime in seconds    session.cookie.name  (string)  (none)  Name of the session cookie    session.cookie.domain  (string  blank)  request's http domain    session.cookie.path=  (string  /)  (none)    session.params.db_adapter  name of the db adapter  (none)  If you use a db store, set to the name of the db adapter to use It's the same name of the adapter that you defined earlier in the config    session.params.db_table  (string)  (none)  The name of the table to store sessions (see the reference for the table's structure", 
            "title": "Session handler"
        }, 
        {
            "location": "/configuration/config.ini-optional/#enablingdisabling-cache", 
            "text": "This configuration parameter allows you to globally disable the cache handlers that you can use in your app. The default value is to cache.  If you set this to true, the framework will bypass the cache and return false on a \"get\" query, and returns true on a \"set\" query.    You should disable the cache in a dev environment, but you can force it here.     Key  Values  Default  Explanation      cache.enabled  false true  true  Enable (true) or disable (false) the cache globally", 
            "title": "Enabling/disabling cache"
        }, 
        {
            "location": "/configuration/config.ini-optional/#multiple-cache-handlers", 
            "text": "Well of course, you can use only one or none. Just give the cache handler a name (for using it later in your models) and set the parameters for instanciating it.  In this example, we have one global cache, that is shared between the web servers, and another one that is exclusive to every server. The names \"global\" and \"local\" could be whatever you want.  cache.global.handler=memcached\ncache.global.params.hosts=localhost\ncache.global.params.port=11211\ncache.global.lifetime=3600\n\ncache.local.handler=apc  The available settings ar described here, with the name  mycache  that can be whatever you want.     Key  Values  Default  Explanation      cache.mycache.handler  Apc Memcached  (n/a)  Choose a cache adapter    cache.global.lifetime  (int)  600  Enter the default cache lifetime for any object     For Memcache:     Key  Values  Default  Explanation      cache.global.params.hosts  ip/hostname  (n/a)  For Memcache and multiple servers, separate the values with a comma (,)    cache.global.params.port  11211 whatever  (none)  For Memcache, enter the port of the servers     For APC, you don't have anything to do.", 
            "title": "Multiple cache handlers"
        }, 
        {
            "location": "/configuration/config.ini-optional/#cache-keys", 
            "text": "Usually in small apps, you store the name of the cache key for your models in constants of the classes. When you update your application, you don't want to get a conflict of data structure between what your new application expects and what the cache returns.  That's why every key in the datastore uses a pointer to the keys defined in the config.ini. For example:  /* in your model, get the cache storage instance */\n$globalCache = \\Nf\\Cache::getStorage('global'); \n/* set the value if not already in cache: */\n$data = $globalCache- load('temperature', array('country' =  'france', 'city' =  'paris'));  The name of the cache key is dynamic and should be set in the config:  cachekeys.temperature_citycode=temperature_[country]_[city]  The cache handler will remplace [country] and [city] by the actual values and will use the internal key \"temperature_france_paris\" for setting and getting the value from the cache store.  For a shorter code, you can also use a basic array or even just a string, like in these two examples.   If you have a small number of parameters and you are lazy, just send an array :  $data = $globalCache- load('temperature', array('france', 'paris'));  If you have only one parameter in the key, like: temperature_[city]  $data = $globalCache- load('temperature', 'paris');", 
            "title": "Cache keys"
        }, 
        {
            "location": "/configuration/config.ini-optional/#cache-key-prefix", 
            "text": "You can prefix every key in your cache store(s), for example if you change a lot of structure in a new version of your application. You should also prefix the keys when you are using the same cache store for multiple applications.     Key  Values  Default  Explanation      cache.keyPrefix=  (string)  (empty string)  Just remember to make it compatible with your cache store. You can use v1, v2 or the name of your app if you share a memcache server with other applications.", 
            "title": "Cache key prefix"
        }, 
        {
            "location": "/configuration/config.ini-optional/#security-options", 
            "text": "Security should be implemented in your application, these options are just here to help.", 
            "title": "Security options"
        }, 
        {
            "location": "/configuration/config.ini-optional/#enable-cors", 
            "text": "Key  Values  Default  Explanation      security.cors.enable  true false  false  Enables the integrated CORS handler    security.cors.allowed_origins  (string)  \"*\"  Set the allowed origins or let the code handle it (\"*\" also adds the referer for making it compatible with some browsers that expect it, like Chrome)    security.cors.allowed_methods  (string http methods comma-separated)  \"GET, POST, DELETE, PUT, PATCH, OPTIONS\"  Usually you app will handle the allowed routes and operations, you can leave the default values    security.cors.allowed_credentials  true false  true  Adds a header Access-Control-Allow-Credentials:true    security.cors.allowed_headers  (strings, comma-separated)  \"authorization\"  Usually you might need to set this value to \"authorization, content-type\"    security.cors.max_age  integer  86400  number of seconds to remember the allowed route", 
            "title": "Enable CORS"
        }, 
        {
            "location": "/configuration/config.ini-optional/#learn-how-to-create-a-useful-configini", 
            "text": "Let's go the next page!", 
            "title": "Learn how to create a useful config.ini"
        }, 
        {
            "location": "/configuration/config.ini-more/", 
            "text": "Getting more of the config.ini\n\n\nSections\n\n\nUsually you will need to use the sections in the config.ini. They are like an object in OOP with (single) inheritance.\n\n\nYou usually begin to write your config.ini with a \"common\" section that all of the versions and languages of your application will share.\n\n\n[common]\napp.name = \nMy first app\n\n\ndb.app.adapter = Mysqli\ndb.app.params.charset = \nutf8\n\n\n\n\n\nHere we set an adapter for our database server and a charset, that will be common obviously.\n\n\nThen in dev environment, you will set a host and database with user/password. We create the \"dev\" section. This will be shared by all languages and versions in our developement environment. \n\n\n[dev:common]\ndb.app.params.hostname = \nmysql-dev-server.internal\n\ndb.app.params.username = \ndevelopment-user\n\ndb.app.params.password = \ndevelopment-password\n\ndb.app.params.database = \napp_dev\n\n\n\n\n\nThen you will have to configure the other sections that the framework will read for bootstrapping the various languages and versions that you will develop.\n\n\nIn this example, we are just using the (default) en_US locale and three versions :\n - cli (our cron tasks will be here)\n - api (our REST api)\n - web (our front app)\n\n\n[en_US-dev-cli:dev]\n\n[en_US-dev-api:dev]\n\n[en_US-dev-web:dev]\n\n\n\n\nThe three sections do not overwrite anything but just inherit from our \"dev\" section and will therefore share the same values for our database \"db.app\".\n\n\nThen we will publish our application on the production servers, so we need a \"prod\" section:\n\n\n[prod:common]\ndb.app.params.hostname = \ndb-prod-1.internal\n\ndb.app.params.username = \napp_prod\n\ndb.app.params.password = \nproduction-password\n\ndb.app.params.database = \napp_prod\n\n\n\n\n\nWe overwrite with the production hostname, user, password, database's name.\n\n\nThis section (\"prod\") will be extended for our various languages and versions in production environment.\n\n\n[en_US-prod-cli:prod]\n\n[en_US-prod-api:prod]\n\n[en_US-prod-web:prod]\n\n\n\n\nWe are just inheriting from prod that contains already the right settings since our example app shares the same database server obviously.\n\n\nOther settings\n\n\nIn the previous page the parameter for disabling cache was explained. In production we will need the cache.\n\n\nSo in the prod section, enable it with:\n\n\n[prod]\ncache.enabled=true", 
            "title": "config.ini - going further"
        }, 
        {
            "location": "/configuration/config.ini-more/#sections", 
            "text": "Usually you will need to use the sections in the config.ini. They are like an object in OOP with (single) inheritance.  You usually begin to write your config.ini with a \"common\" section that all of the versions and languages of your application will share.  [common]\napp.name =  My first app \n\ndb.app.adapter = Mysqli\ndb.app.params.charset =  utf8   Here we set an adapter for our database server and a charset, that will be common obviously.  Then in dev environment, you will set a host and database with user/password. We create the \"dev\" section. This will be shared by all languages and versions in our developement environment.   [dev:common]\ndb.app.params.hostname =  mysql-dev-server.internal \ndb.app.params.username =  development-user \ndb.app.params.password =  development-password \ndb.app.params.database =  app_dev   Then you will have to configure the other sections that the framework will read for bootstrapping the various languages and versions that you will develop.  In this example, we are just using the (default) en_US locale and three versions :\n - cli (our cron tasks will be here)\n - api (our REST api)\n - web (our front app)  [en_US-dev-cli:dev]\n\n[en_US-dev-api:dev]\n\n[en_US-dev-web:dev]  The three sections do not overwrite anything but just inherit from our \"dev\" section and will therefore share the same values for our database \"db.app\".  Then we will publish our application on the production servers, so we need a \"prod\" section:  [prod:common]\ndb.app.params.hostname =  db-prod-1.internal \ndb.app.params.username =  app_prod \ndb.app.params.password =  production-password \ndb.app.params.database =  app_prod   We overwrite with the production hostname, user, password, database's name.  This section (\"prod\") will be extended for our various languages and versions in production environment.  [en_US-prod-cli:prod]\n\n[en_US-prod-api:prod]\n\n[en_US-prod-web:prod]  We are just inheriting from prod that contains already the right settings since our example app shares the same database server obviously.", 
            "title": "Sections"
        }, 
        {
            "location": "/configuration/config.ini-more/#other-settings", 
            "text": "In the previous page the parameter for disabling cache was explained. In production we will need the cache.  So in the prod section, enable it with:  [prod]\ncache.enabled=true", 
            "title": "Other settings"
        }, 
        {
            "location": "/configuration/url.ini/", 
            "text": "Within a single application, you can have:\n\n\n\n\nmultiple versions (for example, your website, your administration back-office, your REST api)\n\n\nmultiple environments of course (dev, test, prod)\n\n\nmultiple languages (English, French, German), with or without a unique URL for each one\n\n\n\n\nThe \"url.ini\" is the file where you set up all these variables.\n\n\n Example \n\n\n[defaults]\nlocale=en_US\nversion=web\nenvironment=dev\n\n[localeSelectionOrder]\ndev=domain\ntest=cookie, browser\nprod=domain\n\n[regexps]\nen_US-dev-web=\n/myapp\\.dev\\.example\\.com/\n\nen_US-dev-api=\n/api\\.myapp\\.dev\\.example\\.com/\n\nfr_FR-dev-web=\n/fr\\.myapp\\.dev\\.example\\.com/\n\nfr_FR-dev-api=\n/fr\\.api\\.myapp\\.dev\\.example\\.com/\n\n\nen_US-test-web=\n/myapp\\.jenkins\\.internal/\n\nen_US-test-api=\n/api\\.myapp\\.jenkins\\.internal/\n\n\nen_US-prod-web=\n/www\\.example\\.com/\n\nfr_FR-prod-web=\n/fr\\.example\\.com/\n\nen_US-prod-web=\n/api\\.example\\.com/\n\nfr_FR-prod-web=\n/fr\\.api\\.example\\.com/\n\n\n\n\n\nIn the exampe above, which is a simple example, we define: \n\n\n\n\na default locale: \"en_US\" (the labels are in /labels/en_US.ini)\n\n\na default version: \"web\" (the modules are in /application/web/...)\n\n\n\n\nThen, we have the \"localeSelectionOrder\" that allows us to choose the requested locale automatically:\n\n\n\n\ndev: domain means that we decide of the locale to use with the domain name\n\n\ntest: we decide of the locale to use with a cookie (cookie name: \"_nfLc\"), or the browser locale. Ultimately, if we don't have a match, we will use the default language.\n\n\nprod: domain means that we decide of the locale to use with the domain name\n\n\n\n\nWe then define the regexps for matching with the domain names:\n\n\n\n\na dev environment with the regexp for checking \"myapp.dev.example.com\", and \"fr...\" for the French language of the dev environment in the web version.\n\n\ntwo versions are defined: web, and api. We define also the domain names for each version and language.", 
            "title": "url.ini"
        }, 
        {
            "location": "/configuration/routes/", 
            "text": "How to define routes for your application\n\n\nThe routes are defined by a php file. Yes it's not a .ini this time.\n\n\nLet's start with an example of a route file.\n\n\nExample\n\n\nLet's suppose we create a file called \"article.php\" in the routes directory. The router will use this route for all our versions and languages since it's in the root of the \"/routes\" directory.\n\n\nWe will see later how to set a route for another version and language, inherit, etc.\n\n\n?php\nreturn array(\n    array(\n        'type' =\n 'default',\n        'contentType' =\n 'html',\n        'name' =\n 'demo-test-id',\n        'regexp' =\n 'test/(name:[a-z\\-]+)(id:\\d+)',\n        'controller' =\n 'home/index/demo',\n        'cacheMinutes' =\n 5\n    ),\n    array(\n        'type' =\n 'rest',\n        'contentType' =\n 'json',\n        'name' =\n 'demo-test2-id',\n        'regexp' =\n 'test2/(name:[a-z\\-]+)(id:\\d+)',\n        'controller' =\n 'home/test2',\n        'middlewares' =\n array(\n            'App\\Colorize'\n        ),\n        'cacheMinutes' =\n 10\n    )\n); \n\n\n\n\nIt's a php file returning an array of the routes for the URLs that begin with the name of the php file.\n\n\nExplanations\n\n\nThe first route will:\n\n\n\n\nmatch (for example): /article/test/something27 (the name of the file is \"article.php\" so NoFussFramework will prefix the route entries with this string \"/article/\")\n\n\ntrigger the method demoAction of the controller index of the home module (application/web/home/controllers/IndexController.php, demoAction)\n\n\n\n\nAnd the optional parameters in this route entry will:\n\n\n\n\nset the cache in the client to 5 minutes\n\n\nname the route \"demo-test-id\" so we can create a route in our code (or our templates) to point to this entry without having to write the route manually\n\n\noutput its content to the html content-type (it's the default anyway)\n\n\n\n\nThe second route will:\n\n\n\n\nset our router to REST mode, the actions will correspond to the http method used in the request (so a GET will call getAction, a POST will call postAction, etc)\n\n\nset the content-type to json (so you don't have to write or repeat it in your code)\n\n\nset the name to demo-test2-id\n\n\nset the controller used to test2 in the home module (application/web/home/controllers/Test2Controller.php)\n\n\ninstantiate and call the middleware \"Colorize\" present in our models (/models/Colorize.php), it could be a middleware that adds a css to our html file (it's a basic example)\n\n\nset the client's cache time to 10 minutes\n\n\n\n\nHow to write a route file\n\n\nThe file should return an array of arrays like in the first example, and should be named with the first string after the first slash of the url, so:\n- /routes/demo.php will be read by the router that will prefix every entry by \"/demo/\", you don't have to repeat it in your file.\n\n\nFor the root of the application, for URLs that are at the root (/something.html for example), you create a file called _root.php:\n- /routes/_root.php will be tried to match when a URL does not contain any slash (\"/\") or when other routes did not match anything\n\n\nIf you want to set a route to something like \"/campaigns\" using REST handling, just create the route entry this way:\n\n\narray(\n    'regexp' =\n '$',\n    'type' =\n 'rest',\n    'controller' =\n 'campaign/list',\n    'contentType' =\n 'json',\n    'middlewares' =\n [ 'App\\Middleware\\NeedsAuth' ]\n),\n\n\n\n\nAlso, in this route we added a middleware for handling http authentication. Please look in the \nmiddlewares section\n for more information on how to write a middleware.\n\n\nA focus on REST handling\n\n\nYou can define a REST endpoint pointing to a controller, which means that you just have to write the methods in your controller. Set the route type to \"rest\" and then in your controller, define the methods:\n\n\n\n\ngetAction (for a GET request)\n\n\npostAction (for a POST request)\n\n\nputAction (for a PUT request)\n\n\npatchAction (for a PATCH request)\n\n\ndeleteAction (for a DELETE request)\n\n\n\n\nIf your API needs to be used by clients that cannot issue a PUT or DELETE request (dumb firewall/administrator issue), you can send, from the client, a POST request with one of the additional HTTP headers (HTTP_X_HTTP_METHOD, HTTP_X_HTTP_METHOD_OVERRIDE, HTTP_X_METHOD_OVERRIDE) specifying the method to use (that would be PUT or PATCH or DELETE). \n\n\nFor this to work, a minimal template would be:\n\n\n   array(\n        'type' =\n 'rest',\n        'regexp' =\n 'test2/(name:[a-z\\-]+)(id:\\d+)',\n        'controller' =\n 'home/test2'\n    )\n); \n\n\n\n\nHow to create a route for a specific version and/or language\n\n\nThe router expects the routes to be written in the /routes directory with this optional hierarchy:\n\n\n\n\n/routes\n\n\n/routes/web or /routes/api\n\n\n/routes/web/fr_FR or /routes/web/en_US\n\n\n\n\nThe router will then read the route entries in the deepest folder that is matching the URL. If the router detects (with help from the url.ini) that we are requesting in the fr_FR language, then it will look into the corresponding fr_FR folder.\n\n\nAnd you can do this the other way, by inheriting, see further in this doc.\n\n\nContent-type\n\n\nThe various content types that NoFussFramework handles by default are these one :\n\n\n\n\natom\n\n\ncss\n\n\ngif\n\n\njpg / jpeg\n\n\npng \n\n\njs / javascript\n\n\njson\n\n\npdf\n\n\nrss\n\n\ntext\n\n\nxml\n\n\nhtml\n\n\n\n\nJust set it in your route to return the correct content type. You can also set the content-type in your controller with:\n\n\n$this-\nresponse-\nsetContentType('js');\n\n\n\n\nNaming\n\n\nYou can optionally name a route for using inheritance or writing urls from your app without code duplication. Let's return to that a bit later.\n\n\nRegexp matching and route parameters\n\n\nThe framework only decides of the correct route with a regexp and the name of the route file (for example \"demo.php\") will be the first part of the regexp. Put everything beginning with /demo/ in demo.php.\n\n\nFor matching the parameters in your routes, use a capturing group with the name of the variable in front of the regexp, for example:\n\n\ntest/(name:[a-z\\-]+)(id:\\d+)\n\n\n\n\nwill register a parameter named \"name\" matching all letters from a to z, and another one name \"id\" matching an integer at the end of the url.\n\n\nIn your controller, get these parameters with:\n\n\n$params = $this-\nrequest-\ngetParams();\n\n\n\n\nOn in a model (not recommended anyway), get them this way:\n\n\n$front = \\Nf\\Front::getInstance();\n$request = $front-\ngetRequest();\n$params = $request-\ngetParams();\n\n\n\n\nFor the url /test/bike45, you would have an array $params that contains:\n\n\n\n\nname: \"bike\"\n\n\nid: \"45\"  \n\n\n\n\nCache settings\n\n\nYou can easily tell the reverse proxy in front of your webservers and the client browser to set a cache timeout, in minutes.\n\n\nIf you use 0, the page will not be cached (or at least you ask not to), and if you use, say, 5, the page will be 5 minutes in cache.\n\n\nRoute inheritance\n\n\nIf you have multiple languages and of course do not want to maintain multiple routes for the same actions, just give a name to the route, for example, we have the \"demo-test-id\" route. We want it to point to: home (module)/index (controller)/index (action). \n\n\nname\n =\n \ndemo-test-id\n\n\nregexp\n =\n 'test/(name:[a-z\\-]+)(id:\\d+)',\n\ncontroller\n =\n 'home/index/demo',\n\n\n\n\nin the file /routes/demo.php.\n\n\nThen in /routes/web/en, you can re-use this route but use a different prefix in the URL (say \"demoen\", that will only be matched on the \"en\" version because you put it in /routes/web/en). You would create a file in: \"/routes/web/en/demoen.php\" containing this :\n\n\nreturn array(\n    array(\n        'type' =\n 'inherit',\n        'from' =\n 'demo-test-id'\n    )\n);\n\n\n\n\nThe framework would then use the settings of the route defined before: same regexp, same controller, same everything but the first part of the url. It would not be \"/demo/bike45\" but \"/demoen/bike45\".   \n\n\nMore on the route inheritance\n\n\nThe inheritance goes from the lowest folder to the deepest one:\n\n\n\n\n/routes/ is the base, used for all versions and locales\n\n\n/routes/\n is the folder used for this \n (\"/web\" in our example)\n\n\n/routes/\n/\n is the folder used for this \n and this \n (\"/en\")\n\n\n\n\nYou can of course re-use a route from the base or from a version in a route that is specific to a locale.\n\n\nAll variables\n\n\nA route is an array:\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntype\n\n\ndefault / rest / inherit\n\n\ndefault\n\n\n\n\n\n\ncontentType\n\n\nhtml / json / ... (all the types defined below)\n\n\nhtml\n\n\n\n\n\n\nname\n\n\ngive it a name if you want to reuse it\n\n\n\n\n\n\n\n\nregexp\n\n\nthe regular expression for the remaining part of the route (after the name of the route/file (.php)\n\n\nN/A\n\n\n\n\n\n\ncontroller\n\n\nthe module/controller/action to use\n\n\nN/A\n\n\n\n\n\n\ncacheMinutes\n\n\nnumber of minutes to cache the response (proxy and/or client)\n\n\n0, by default the pages are NOT cached\n\n\n\n\n\n\nmiddlewares\n\n\nthe middlewares to call, enter the names of the middlewares in an array\n\n\n\n\n\n\n\n\nfrom\n\n\nif you set the type to \"inherit\", enter the name of the route to inherit from\n\n\nN/A\n\n\n\n\n\n\n\n\nHow to specify a route for a non prefixed url (like /bla.html for example)\n\n\nSince this URL does not have a \"prefix\", we can not name a file with nothing so we add the routes in _root.php, for example:\n\n\n/routes/_root.php\n\n\n?php\nreturn (array(\n    array(\n        'type' =\n 'default',\n        'name' =\n 'root-bla',\n        'regexp' =\n 'bla\\.html',\n        'controller' =\n 'home/index/index'\n    )\n));\n\n\n\n\nIn the example above, we gave a name \"root-bla\" to the route but it's optional of course. \n\n\nYou can obviously setup different \"_root\" routes in each version and locale, and inherit from them too.", 
            "title": "routes"
        }, 
        {
            "location": "/configuration/routes/#how-to-define-routes-for-your-application", 
            "text": "The routes are defined by a php file. Yes it's not a .ini this time.  Let's start with an example of a route file.", 
            "title": "How to define routes for your application"
        }, 
        {
            "location": "/configuration/routes/#example", 
            "text": "Let's suppose we create a file called \"article.php\" in the routes directory. The router will use this route for all our versions and languages since it's in the root of the \"/routes\" directory.  We will see later how to set a route for another version and language, inherit, etc.  ?php\nreturn array(\n    array(\n        'type' =  'default',\n        'contentType' =  'html',\n        'name' =  'demo-test-id',\n        'regexp' =  'test/(name:[a-z\\-]+)(id:\\d+)',\n        'controller' =  'home/index/demo',\n        'cacheMinutes' =  5\n    ),\n    array(\n        'type' =  'rest',\n        'contentType' =  'json',\n        'name' =  'demo-test2-id',\n        'regexp' =  'test2/(name:[a-z\\-]+)(id:\\d+)',\n        'controller' =  'home/test2',\n        'middlewares' =  array(\n            'App\\Colorize'\n        ),\n        'cacheMinutes' =  10\n    )\n);   It's a php file returning an array of the routes for the URLs that begin with the name of the php file.", 
            "title": "Example"
        }, 
        {
            "location": "/configuration/routes/#explanations", 
            "text": "The first route will:   match (for example): /article/test/something27 (the name of the file is \"article.php\" so NoFussFramework will prefix the route entries with this string \"/article/\")  trigger the method demoAction of the controller index of the home module (application/web/home/controllers/IndexController.php, demoAction)   And the optional parameters in this route entry will:   set the cache in the client to 5 minutes  name the route \"demo-test-id\" so we can create a route in our code (or our templates) to point to this entry without having to write the route manually  output its content to the html content-type (it's the default anyway)   The second route will:   set our router to REST mode, the actions will correspond to the http method used in the request (so a GET will call getAction, a POST will call postAction, etc)  set the content-type to json (so you don't have to write or repeat it in your code)  set the name to demo-test2-id  set the controller used to test2 in the home module (application/web/home/controllers/Test2Controller.php)  instantiate and call the middleware \"Colorize\" present in our models (/models/Colorize.php), it could be a middleware that adds a css to our html file (it's a basic example)  set the client's cache time to 10 minutes", 
            "title": "Explanations"
        }, 
        {
            "location": "/configuration/routes/#how-to-write-a-route-file", 
            "text": "The file should return an array of arrays like in the first example, and should be named with the first string after the first slash of the url, so:\n- /routes/demo.php will be read by the router that will prefix every entry by \"/demo/\", you don't have to repeat it in your file.  For the root of the application, for URLs that are at the root (/something.html for example), you create a file called _root.php:\n- /routes/_root.php will be tried to match when a URL does not contain any slash (\"/\") or when other routes did not match anything  If you want to set a route to something like \"/campaigns\" using REST handling, just create the route entry this way:  array(\n    'regexp' =  '$',\n    'type' =  'rest',\n    'controller' =  'campaign/list',\n    'contentType' =  'json',\n    'middlewares' =  [ 'App\\Middleware\\NeedsAuth' ]\n),  Also, in this route we added a middleware for handling http authentication. Please look in the  middlewares section  for more information on how to write a middleware.", 
            "title": "How to write a route file"
        }, 
        {
            "location": "/configuration/routes/#a-focus-on-rest-handling", 
            "text": "You can define a REST endpoint pointing to a controller, which means that you just have to write the methods in your controller. Set the route type to \"rest\" and then in your controller, define the methods:   getAction (for a GET request)  postAction (for a POST request)  putAction (for a PUT request)  patchAction (for a PATCH request)  deleteAction (for a DELETE request)   If your API needs to be used by clients that cannot issue a PUT or DELETE request (dumb firewall/administrator issue), you can send, from the client, a POST request with one of the additional HTTP headers (HTTP_X_HTTP_METHOD, HTTP_X_HTTP_METHOD_OVERRIDE, HTTP_X_METHOD_OVERRIDE) specifying the method to use (that would be PUT or PATCH or DELETE).   For this to work, a minimal template would be:     array(\n        'type' =  'rest',\n        'regexp' =  'test2/(name:[a-z\\-]+)(id:\\d+)',\n        'controller' =  'home/test2'\n    )\n);", 
            "title": "A focus on REST handling"
        }, 
        {
            "location": "/configuration/routes/#how-to-create-a-route-for-a-specific-version-andor-language", 
            "text": "The router expects the routes to be written in the /routes directory with this optional hierarchy:   /routes  /routes/web or /routes/api  /routes/web/fr_FR or /routes/web/en_US   The router will then read the route entries in the deepest folder that is matching the URL. If the router detects (with help from the url.ini) that we are requesting in the fr_FR language, then it will look into the corresponding fr_FR folder.  And you can do this the other way, by inheriting, see further in this doc.", 
            "title": "How to create a route for a specific version and/or language"
        }, 
        {
            "location": "/configuration/routes/#content-type", 
            "text": "The various content types that NoFussFramework handles by default are these one :   atom  css  gif  jpg / jpeg  png   js / javascript  json  pdf  rss  text  xml  html   Just set it in your route to return the correct content type. You can also set the content-type in your controller with:  $this- response- setContentType('js');", 
            "title": "Content-type"
        }, 
        {
            "location": "/configuration/routes/#naming", 
            "text": "You can optionally name a route for using inheritance or writing urls from your app without code duplication. Let's return to that a bit later.", 
            "title": "Naming"
        }, 
        {
            "location": "/configuration/routes/#regexp-matching-and-route-parameters", 
            "text": "The framework only decides of the correct route with a regexp and the name of the route file (for example \"demo.php\") will be the first part of the regexp. Put everything beginning with /demo/ in demo.php.  For matching the parameters in your routes, use a capturing group with the name of the variable in front of the regexp, for example:  test/(name:[a-z\\-]+)(id:\\d+)  will register a parameter named \"name\" matching all letters from a to z, and another one name \"id\" matching an integer at the end of the url.  In your controller, get these parameters with:  $params = $this- request- getParams();  On in a model (not recommended anyway), get them this way:  $front = \\Nf\\Front::getInstance();\n$request = $front- getRequest();\n$params = $request- getParams();  For the url /test/bike45, you would have an array $params that contains:   name: \"bike\"  id: \"45\"     Cache settings  You can easily tell the reverse proxy in front of your webservers and the client browser to set a cache timeout, in minutes.  If you use 0, the page will not be cached (or at least you ask not to), and if you use, say, 5, the page will be 5 minutes in cache.", 
            "title": "Regexp matching and route parameters"
        }, 
        {
            "location": "/configuration/routes/#route-inheritance", 
            "text": "If you have multiple languages and of course do not want to maintain multiple routes for the same actions, just give a name to the route, for example, we have the \"demo-test-id\" route. We want it to point to: home (module)/index (controller)/index (action).   name  =   demo-test-id  regexp  =  'test/(name:[a-z\\-]+)(id:\\d+)', controller  =  'home/index/demo',  in the file /routes/demo.php.  Then in /routes/web/en, you can re-use this route but use a different prefix in the URL (say \"demoen\", that will only be matched on the \"en\" version because you put it in /routes/web/en). You would create a file in: \"/routes/web/en/demoen.php\" containing this :  return array(\n    array(\n        'type' =  'inherit',\n        'from' =  'demo-test-id'\n    )\n);  The framework would then use the settings of the route defined before: same regexp, same controller, same everything but the first part of the url. It would not be \"/demo/bike45\" but \"/demoen/bike45\".", 
            "title": "Route inheritance"
        }, 
        {
            "location": "/configuration/routes/#more-on-the-route-inheritance", 
            "text": "The inheritance goes from the lowest folder to the deepest one:   /routes/ is the base, used for all versions and locales  /routes/  is the folder used for this   (\"/web\" in our example)  /routes/ /  is the folder used for this   and this   (\"/en\")   You can of course re-use a route from the base or from a version in a route that is specific to a locale.", 
            "title": "More on the route inheritance"
        }, 
        {
            "location": "/configuration/routes/#all-variables", 
            "text": "A route is an array:     Key  Value  Default      type  default / rest / inherit  default    contentType  html / json / ... (all the types defined below)  html    name  give it a name if you want to reuse it     regexp  the regular expression for the remaining part of the route (after the name of the route/file (.php)  N/A    controller  the module/controller/action to use  N/A    cacheMinutes  number of minutes to cache the response (proxy and/or client)  0, by default the pages are NOT cached    middlewares  the middlewares to call, enter the names of the middlewares in an array     from  if you set the type to \"inherit\", enter the name of the route to inherit from  N/A", 
            "title": "All variables"
        }, 
        {
            "location": "/configuration/routes/#how-to-specify-a-route-for-a-non-prefixed-url-like-blahtml-for-example", 
            "text": "Since this URL does not have a \"prefix\", we can not name a file with nothing so we add the routes in _root.php, for example:  /routes/_root.php  ?php\nreturn (array(\n    array(\n        'type' =  'default',\n        'name' =  'root-bla',\n        'regexp' =  'bla\\.html',\n        'controller' =  'home/index/index'\n    )\n));  In the example above, we gave a name \"root-bla\" to the route but it's optional of course.   You can obviously setup different \"_root\" routes in each version and locale, and inherit from them too.", 
            "title": "How to specify a route for a non prefixed url (like /bla.html for example)"
        }, 
        {
            "location": "/development/bootstrap/", 
            "text": "A short note on the index.php file\n\n\nReally, this page is about configuring the autoloader :)\n\n\nLibrary path and Application path\n\n\nNB\n\n\nPlease note that if you cloned the nofussframework's empty site \nnofussframework empty site example\n, then everything is already setup and you don't need to do anything. This page is just here so you understand how the framework works internally.\n\n\nThis framework was designed to be used by multiple applications so the framework and other classes may be stored outside of your application's directory and be shared by tour multiple applications.\n\n\nThe libraryPath contains the folder of your \"library\" that may contain for example the nofuss framework.\n\n\nUsually (if you used composer from the \nnofussframework empty site example\n you will have a line like this:\n\n\n$libraryPath = realpath(dirname(__FILE__) . '/../vendor/nofussframework/nofussframework/Nf');\n\n\n\n\nBut you can change it to:\n\n\n$libraryPath = realpath(dirname(__FILE__) . '/../../library');\n\n\n\n\nand put the Nf folder of the framework in a subfolder of this library directory.\n\n\nYou just have to change the require of the autoloader then:\n\n\nrequire ($libraryPath . '/Nf/Autoloader.php');\n\n\n\n\nDefine the namespace of your app\n\n\nIn the file called index.php located in /html, you can change the default namespace of your app. We use \"App\" in the whole examples.\n\n\n$applicationNamespace='App';\n\n\n\n\nThis name is the root namespace of all your models, controllers, middlewares.  \n\n\nAutoloader\n\n\nThe autoloader of nofussframework is compatible with both the (old) PSR-0 and the PSR-1 file hierarchy.\n\n\nAdd other folders for dependencies\n\n\nYou might want to use external php classes or helpers for your application. You have to tell the framework how to find them in the index.php file.\n\n\nExample on how to add a properly named PSR-1 dependency:\n\n\n$autoloader-\naddNamespaceRoot('', $applicationPath . '/vendor');\n\n\n\n\nIn this example, you want to add the library \"Buzz\" to your project. Just copy the Buzz folder in your /vendor folder and this line will try to autoload the files from Buzz here.\n\n\nYou don't need to add anything else really.\n\n\nYou can however add multiple directories like this:\n\n\n$autoloader-\naddNamespaceRoot('', $libraryPath . '/vendor');\n\n\n\n\nThe order in which you define the namespace roots will be used sequentially to autoload a class.\n\n\nExample on how to add another dependency:\n\n\n$autoloader-\naddNamespaceRoot('somethingElse', $applicationPath . '/vendor/somethingElse');\n\n\n\n\nThis will tell the autoloader to also use this folder.\n\n\nHow to add a classmap\n\n\nFor example we would like to add the classmap of Impala, we use the addMap method:\n\n\n$autoloader-\naddMap($applicationPath . '/vendor/php-impala-classmap.php');", 
            "title": "Bootstrap"
        }, 
        {
            "location": "/development/bootstrap/#library-path-and-application-path", 
            "text": "NB  Please note that if you cloned the nofussframework's empty site  nofussframework empty site example , then everything is already setup and you don't need to do anything. This page is just here so you understand how the framework works internally.  This framework was designed to be used by multiple applications so the framework and other classes may be stored outside of your application's directory and be shared by tour multiple applications.  The libraryPath contains the folder of your \"library\" that may contain for example the nofuss framework.  Usually (if you used composer from the  nofussframework empty site example  you will have a line like this:  $libraryPath = realpath(dirname(__FILE__) . '/../vendor/nofussframework/nofussframework/Nf');  But you can change it to:  $libraryPath = realpath(dirname(__FILE__) . '/../../library');  and put the Nf folder of the framework in a subfolder of this library directory.  You just have to change the require of the autoloader then:  require ($libraryPath . '/Nf/Autoloader.php');", 
            "title": "Library path and Application path"
        }, 
        {
            "location": "/development/bootstrap/#define-the-namespace-of-your-app", 
            "text": "In the file called index.php located in /html, you can change the default namespace of your app. We use \"App\" in the whole examples.  $applicationNamespace='App';  This name is the root namespace of all your models, controllers, middlewares.", 
            "title": "Define the namespace of your app"
        }, 
        {
            "location": "/development/bootstrap/#autoloader", 
            "text": "The autoloader of nofussframework is compatible with both the (old) PSR-0 and the PSR-1 file hierarchy.", 
            "title": "Autoloader"
        }, 
        {
            "location": "/development/bootstrap/#add-other-folders-for-dependencies", 
            "text": "You might want to use external php classes or helpers for your application. You have to tell the framework how to find them in the index.php file.", 
            "title": "Add other folders for dependencies"
        }, 
        {
            "location": "/development/bootstrap/#example-on-how-to-add-a-properly-named-psr-1-dependency", 
            "text": "$autoloader- addNamespaceRoot('', $applicationPath . '/vendor');  In this example, you want to add the library \"Buzz\" to your project. Just copy the Buzz folder in your /vendor folder and this line will try to autoload the files from Buzz here.  You don't need to add anything else really.  You can however add multiple directories like this:  $autoloader- addNamespaceRoot('', $libraryPath . '/vendor');  The order in which you define the namespace roots will be used sequentially to autoload a class.", 
            "title": "Example on how to add a properly named PSR-1 dependency:"
        }, 
        {
            "location": "/development/bootstrap/#example-on-how-to-add-another-dependency", 
            "text": "$autoloader- addNamespaceRoot('somethingElse', $applicationPath . '/vendor/somethingElse');  This will tell the autoloader to also use this folder.", 
            "title": "Example on how to add another dependency:"
        }, 
        {
            "location": "/development/bootstrap/#how-to-add-a-classmap", 
            "text": "For example we would like to add the classmap of Impala, we use the addMap method:  $autoloader- addMap($applicationPath . '/vendor/php-impala-classmap.php');", 
            "title": "How to add a classmap"
        }, 
        {
            "location": "/development/controllers/", 
            "text": "Controllers\n\n\nhttp example\n\n\nA basic controller has methods that match the route entries, or the url hierarchy in cli mode.\n\n\nIn http mode (everything that is not cli is in http mode and uses the routing entries):\n\n\n\n\na controller for a version \"web\" will be in the \n/application/web\n folder\n\n\nin the corresponding module (for example \"\narticle\n\"): \n/application/web/article\n\n\nwill be in the \"App\\Article\" namespace (\nApp\n is the namespace defined in the \nindex.php\n of your application, \nArticle\n is the sub namespace for this module)\n\n\nin a subfolder \"controllers\" of this module: \n/application/web/article/controllers/\n\n\nand be named in CamelCase with the Controller suffix\n\n\n\n\nSo a route defined this way:\n\n\n/routes/web/article.php\n\n\narray(\n    'regexp' =\n 'review/(name:[a-z\\-]+)(id:\\d+)',\n    'controller' =\n 'article/index/review'\n)\n\n\n\n\nwill point to:\n\n\n\n\n/application/web/article/controllers/IndexController.php\n\n\nand the framework will call the \nreviewAction\n method of this file.\n\n\n\n\nThe fact that the namespace and the route have the same name is not required, obviously.\n\n\n?php\n\nnamespace App\\Article;\n\nclass IndexController extends \\Nf\\Front\\Controller\n{\n    public function reviewAction()\n    {\n        // your code goes here\n\n\n\n\nother http versions\n\n\nFor other http versions that you may define in your url.ini, just put your module in the /application/\n.\n\n\nFor example, an api version would be in /application/api, with this line in this example url.ini:\n\n\n[regexps]\nen_US-dev-api=\n/api\\.myapp\\.dev\\.example\\.com/\n\n\n\n\n\ncli example\n\n\nThe cli \ndoes not\n use any routing since it would add useless work.\n\n\nTo call an action in cli, you just have to call:\n\n\nphp html/index.php -e prod -l en_US -a \nmodule\n/\ncontroller\n/\naction\n -param1 value1 -param2 value2\n\n\n\n\nThe parameters that the cli version requires are:\n\n\n\n\n\"e\" means environment (mandatory), you can also use -environment\n\n\n\"a\" means action (mandatory), or you can use -action\n\n\n\"l\" means locale (it's optional), or you can use -locale\n\n\nparameters are sent to the controller using the \"-param value\" notation\n\n\n\n\nYou can switch to the \"dev\" environment by using :\n\n\n\n\n-e dev\n\n\n\n\nBy default, the framework will use the default locale defined in the url.ini.\n\n\nJust put your module in the /application/cli folder of your application.", 
            "title": "Controllers"
        }, 
        {
            "location": "/development/controllers/#http-example", 
            "text": "A basic controller has methods that match the route entries, or the url hierarchy in cli mode.  In http mode (everything that is not cli is in http mode and uses the routing entries):   a controller for a version \"web\" will be in the  /application/web  folder  in the corresponding module (for example \" article \"):  /application/web/article  will be in the \"App\\Article\" namespace ( App  is the namespace defined in the  index.php  of your application,  Article  is the sub namespace for this module)  in a subfolder \"controllers\" of this module:  /application/web/article/controllers/  and be named in CamelCase with the Controller suffix   So a route defined this way:  /routes/web/article.php  array(\n    'regexp' =  'review/(name:[a-z\\-]+)(id:\\d+)',\n    'controller' =  'article/index/review'\n)  will point to:   /application/web/article/controllers/IndexController.php  and the framework will call the  reviewAction  method of this file.   The fact that the namespace and the route have the same name is not required, obviously.  ?php\n\nnamespace App\\Article;\n\nclass IndexController extends \\Nf\\Front\\Controller\n{\n    public function reviewAction()\n    {\n        // your code goes here", 
            "title": "http example"
        }, 
        {
            "location": "/development/controllers/#other-http-versions", 
            "text": "For other http versions that you may define in your url.ini, just put your module in the /application/ .  For example, an api version would be in /application/api, with this line in this example url.ini:  [regexps]\nen_US-dev-api= /api\\.myapp\\.dev\\.example\\.com/", 
            "title": "other http versions"
        }, 
        {
            "location": "/development/controllers/#cli-example", 
            "text": "The cli  does not  use any routing since it would add useless work.  To call an action in cli, you just have to call:  php html/index.php -e prod -l en_US -a  module / controller / action  -param1 value1 -param2 value2  The parameters that the cli version requires are:   \"e\" means environment (mandatory), you can also use -environment  \"a\" means action (mandatory), or you can use -action  \"l\" means locale (it's optional), or you can use -locale  parameters are sent to the controller using the \"-param value\" notation   You can switch to the \"dev\" environment by using :   -e dev   By default, the framework will use the default locale defined in the url.ini.  Just put your module in the /application/cli folder of your application.", 
            "title": "cli example"
        }, 
        {
            "location": "/development/models/", 
            "text": "Namespacing\n\n\nThe autoloader expects your classes (in the whole application) to use the PSR-1 notation.\n\n\nTherefore you will need to declare your models (that are shared within your application): \n\n\n\n\nin the \n/models\n directory\n\n\nbe namespaced with the root of your app (defaults to \"App\")\n\n\nand use the same hierarchy than your namespace's one\n\n\n\n\nSo: \nApp\\Article\\Review\n will be located in : \n/models/Article/Review\n.\n\n\nGetting input data from a model\n\n\nTODO\n\n\nIf you need to get the input data from a model:\n\n\nOther useful functions\n\n\nTODO", 
            "title": "Models"
        }, 
        {
            "location": "/development/models/#namespacing", 
            "text": "The autoloader expects your classes (in the whole application) to use the PSR-1 notation.  Therefore you will need to declare your models (that are shared within your application):    in the  /models  directory  be namespaced with the root of your app (defaults to \"App\")  and use the same hierarchy than your namespace's one   So:  App\\Article\\Review  will be located in :  /models/Article/Review .", 
            "title": "Namespacing"
        }, 
        {
            "location": "/development/models/#getting-input-data-from-a-model", 
            "text": "TODO  If you need to get the input data from a model:", 
            "title": "Getting input data from a model"
        }, 
        {
            "location": "/development/models/#other-useful-functions", 
            "text": "TODO", 
            "title": "Other useful functions"
        }, 
        {
            "location": "/development/views/", 
            "text": "TODO", 
            "title": "Views"
        }, 
        {
            "location": "/development/helpers/", 
            "text": "This page will explain the useful helpers that are shipped with the framework\n\n\nRegistry\n\n\nTODO\n\n\nSettings\n\n\nTODO\n\n\nConfig\n\n\nTODO\n\n\nEnv\n\n\nTODO\n\n\nInput\n\n\nTODO\n\n\nDb\n\n\nTODO\n\n\nCache\n\n\nTODO\n\n\nFile\n\n\nTODO\n\n\nImage\n\n\nTODO\n\n\nLabelManager\n\n\nTODO\n\n\nLocalization\n\n\nTODO\n\n\nMake\n\n\nTODO\n\n\nSession\n\n\nTODO\n\n\nTask\n\n\nTODO\n\n\nUserAgent\n\n\nTODO\n\n\nView", 
            "title": "Helpers: Settings, Config, Env, Registry, etc"
        }, 
        {
            "location": "/development/helpers/#registry", 
            "text": "TODO", 
            "title": "Registry"
        }, 
        {
            "location": "/development/helpers/#settings", 
            "text": "TODO", 
            "title": "Settings"
        }, 
        {
            "location": "/development/helpers/#config", 
            "text": "TODO", 
            "title": "Config"
        }, 
        {
            "location": "/development/helpers/#env", 
            "text": "TODO", 
            "title": "Env"
        }, 
        {
            "location": "/development/helpers/#input", 
            "text": "TODO", 
            "title": "Input"
        }, 
        {
            "location": "/development/helpers/#db", 
            "text": "TODO", 
            "title": "Db"
        }, 
        {
            "location": "/development/helpers/#cache", 
            "text": "TODO", 
            "title": "Cache"
        }, 
        {
            "location": "/development/helpers/#file", 
            "text": "TODO", 
            "title": "File"
        }, 
        {
            "location": "/development/helpers/#image", 
            "text": "TODO", 
            "title": "Image"
        }, 
        {
            "location": "/development/helpers/#labelmanager", 
            "text": "TODO", 
            "title": "LabelManager"
        }, 
        {
            "location": "/development/helpers/#localization", 
            "text": "TODO", 
            "title": "Localization"
        }, 
        {
            "location": "/development/helpers/#make", 
            "text": "TODO", 
            "title": "Make"
        }, 
        {
            "location": "/development/helpers/#session", 
            "text": "TODO", 
            "title": "Session"
        }, 
        {
            "location": "/development/helpers/#task", 
            "text": "TODO", 
            "title": "Task"
        }, 
        {
            "location": "/development/helpers/#useragent", 
            "text": "TODO", 
            "title": "UserAgent"
        }, 
        {
            "location": "/development/helpers/#view", 
            "text": "", 
            "title": "View"
        }, 
        {
            "location": "/development/input-data/", 
            "text": "TODO", 
            "title": "Getting input"
        }, 
        {
            "location": "/development/input-filtering/", 
            "text": "TODO", 
            "title": "Input filtering"
        }, 
        {
            "location": "/development/cache/", 
            "text": "Cache\n\n\nDifferent cache systems\n\n\nTODO\n\n\nexample with apc (local) and memcache (global)\n\n\nTODO", 
            "title": "Cache"
        }, 
        {
            "location": "/development/cache/#different-cache-systems", 
            "text": "TODO", 
            "title": "Different cache systems"
        }, 
        {
            "location": "/development/cache/#example-with-apc-local-and-memcache-global", 
            "text": "TODO", 
            "title": "example with apc (local) and memcache (global)"
        }, 
        {
            "location": "/development/vendor/", 
            "text": "TODO", 
            "title": "External classes"
        }, 
        {
            "location": "/development/performance/", 
            "text": "TODO", 
            "title": "Performance"
        }, 
        {
            "location": "/development/middlewares/", 
            "text": "You can use a middleware (that is just a \"special\" class) in your routes so you don't have to call them in your controllers.\n\n\nThe trait that the middleware's class is using will define the behaviour of the middleware, which could be:\n\n\n\n\n\"pre\", called before running the controller's action\n\n\n\"post\", called after the action\n\n\n\n\nThe CORS middleware\n\n\nFor example, the \"CORS\" middleware is provided with the framework and handle CORS requests.\n\n\nIts settings are explained in the \nconfig.ini optional settings\n documentation page.\n\n\nAn example for authentication\n\n\nWe need a JWT authentication for our application. We just add this middleware in all of our protected routes by adding:\n\n\n'middlewares' =\n [ 'App\\User\\NeedsAuth' ]\n\n\n\n\nto the route entries.\n\n\nThen we create a file in our /models directory, in a subdirectory \"User\", the file would be name \"NeedsAuth.php\":\n\n\n?php\n\nnamespace App\\Middleware;\n\nuse \\Nf\\Middleware\\MiddlewareInterface;\nuse \\Nf\\Middleware\\Pre;\n\nuse \\App\\User;\n\nclass NeedsAuth implements \\Nf\\Middleware\\MiddlewareInterface {\n\n    use Pre;\n\n    public function execute() {\n\n        $needsAuth = true;\n\n        // this is a case sensitive function (!)\n        $headers = apache_request_headers();\n\n        $authHeader = null;\n        foreach($headers as $header =\n $value) {\n            if(strtolower($header) == 'authorization') {\n                $authHeader = $value;\n                break;\n            }\n        }\n\n        if ($authHeader !== null) {\n            $jwt = str_replace('Bearer ', '', $authHeader);\n            $needsAuth = User::checkJWTToken($jwt);\n        }\n\n        if($needsAuth) {\n            throw new \\Nf\\Error\\Exception\\Http\\Unauthorized('authentication required');\n            return false;\n        }\n        else {\n            return true;\n        }\n    }   \n}\n\n\n\n\nNote that this middleware uses the \"Pre\" trait, that means that it will be called in the \"Pre\" flight, before instantiating the controller and calling the right action.\n\n\nThis middleware returns false when the JWT authorization token is invalid or true if it's valid, thus allowing the action of our controller to be executed.\n\n\nAnd more\n\n\nIt was a simple example, you can of course parse the request parameters to allow or not the access to an object in your application, or implement user rights and user profiles, etc, using another middleware.", 
            "title": "Middlewares"
        }, 
        {
            "location": "/development/middlewares/#the-cors-middleware", 
            "text": "For example, the \"CORS\" middleware is provided with the framework and handle CORS requests.  Its settings are explained in the  config.ini optional settings  documentation page.", 
            "title": "The CORS middleware"
        }, 
        {
            "location": "/development/middlewares/#an-example-for-authentication", 
            "text": "We need a JWT authentication for our application. We just add this middleware in all of our protected routes by adding:  'middlewares' =  [ 'App\\User\\NeedsAuth' ]  to the route entries.  Then we create a file in our /models directory, in a subdirectory \"User\", the file would be name \"NeedsAuth.php\":  ?php\n\nnamespace App\\Middleware;\n\nuse \\Nf\\Middleware\\MiddlewareInterface;\nuse \\Nf\\Middleware\\Pre;\n\nuse \\App\\User;\n\nclass NeedsAuth implements \\Nf\\Middleware\\MiddlewareInterface {\n\n    use Pre;\n\n    public function execute() {\n\n        $needsAuth = true;\n\n        // this is a case sensitive function (!)\n        $headers = apache_request_headers();\n\n        $authHeader = null;\n        foreach($headers as $header =  $value) {\n            if(strtolower($header) == 'authorization') {\n                $authHeader = $value;\n                break;\n            }\n        }\n\n        if ($authHeader !== null) {\n            $jwt = str_replace('Bearer ', '', $authHeader);\n            $needsAuth = User::checkJWTToken($jwt);\n        }\n\n        if($needsAuth) {\n            throw new \\Nf\\Error\\Exception\\Http\\Unauthorized('authentication required');\n            return false;\n        }\n        else {\n            return true;\n        }\n    }   \n}  Note that this middleware uses the \"Pre\" trait, that means that it will be called in the \"Pre\" flight, before instantiating the controller and calling the right action.  This middleware returns false when the JWT authorization token is invalid or true if it's valid, thus allowing the action of our controller to be executed.", 
            "title": "An example for authentication"
        }, 
        {
            "location": "/development/middlewares/#and-more", 
            "text": "It was a simple example, you can of course parse the request parameters to allow or not the access to an object in your application, or implement user rights and user profiles, etc, using another middleware.", 
            "title": "And more"
        }, 
        {
            "location": "/reference/http-exceptions/", 
            "text": "A few http exceptions are already integrated into the framework.\n\n\nYou should use them if you are building a REST api for example.\n\n\nBadRequest (http 400)\n\n\nUse this exception to reply to malformatted input for example:\n\n\nthrow new \\Nf\\Error\\Exception\\Http\\BadRequest($errorsArray)\n\n\n\n\nThe $errorsArray will be converted to json and outputted as the response.\n\n\nForbidden (http 403)\n\n\nUse this exception to reply that a route or an object is forbidden for this user.\n\n\nthrow new \\Nf\\Error\\Exception\\Http\\Forbidden()\n\n\n\n\nThis one does not accept any parameters.\n\n\nGone (http 410)\n\n\nUse this exception to reply that a route or an object has been removed indefinitely. You should use this in SEO for example for pages that you removed forever.\n\n\nthrow new \\Nf\\Error\\Exception\\Http\\Gone()\n\n\n\n\nThis one does not accept any parameters.\n\n\nInternalServerError (http 500)\n\n\nThis exception will indicate that a server error has occured. \n\n\nthrow new \\Nf\\Error\\Exception\\Http\\InternalServerError()\n\n\n\n\nThis one does not accept any parameters.\n\n\nNoContent (http 204)\n\n\nThis exception (although in the 200 range) indicates that the request has been treated successfully but does not need to reply anything.\n\n\nthrow new \\Nf\\Error\\Exception\\Http\\NoContent()\n\n\n\n\nThis one does not accept any parameters.\n\n\nNotFound (http 404)\n\n\nThis exception indicates that the object or route was not found.\n\n\nthrow new \\Nf\\Error\\Exception\\Http\\NotFound()\n\n\n\n\nThis one does not accept any parameters.\n\n\nUnauthorized (http 401)\n\n\nThis exception indicates that the access to the route or object was denied, for example you should throw this exception when you expect the user to log in.\n\n\nthrow new \\Nf\\Error\\Exception\\Http\\Unauthorized()\n\n\n\n\nThis one does not accept any parameters.", 
            "title": "default http exceptions"
        }, 
        {
            "location": "/reference/http-exceptions/#badrequest-http-400", 
            "text": "Use this exception to reply to malformatted input for example:  throw new \\Nf\\Error\\Exception\\Http\\BadRequest($errorsArray)  The $errorsArray will be converted to json and outputted as the response.", 
            "title": "BadRequest (http 400)"
        }, 
        {
            "location": "/reference/http-exceptions/#forbidden-http-403", 
            "text": "Use this exception to reply that a route or an object is forbidden for this user.  throw new \\Nf\\Error\\Exception\\Http\\Forbidden()  This one does not accept any parameters.", 
            "title": "Forbidden (http 403)"
        }, 
        {
            "location": "/reference/http-exceptions/#gone-http-410", 
            "text": "Use this exception to reply that a route or an object has been removed indefinitely. You should use this in SEO for example for pages that you removed forever.  throw new \\Nf\\Error\\Exception\\Http\\Gone()  This one does not accept any parameters.", 
            "title": "Gone (http 410)"
        }, 
        {
            "location": "/reference/http-exceptions/#internalservererror-http-500", 
            "text": "This exception will indicate that a server error has occured.   throw new \\Nf\\Error\\Exception\\Http\\InternalServerError()  This one does not accept any parameters.", 
            "title": "InternalServerError (http 500)"
        }, 
        {
            "location": "/reference/http-exceptions/#nocontent-http-204", 
            "text": "This exception (although in the 200 range) indicates that the request has been treated successfully but does not need to reply anything.  throw new \\Nf\\Error\\Exception\\Http\\NoContent()  This one does not accept any parameters.", 
            "title": "NoContent (http 204)"
        }, 
        {
            "location": "/reference/http-exceptions/#notfound-http-404", 
            "text": "This exception indicates that the object or route was not found.  throw new \\Nf\\Error\\Exception\\Http\\NotFound()  This one does not accept any parameters.", 
            "title": "NotFound (http 404)"
        }, 
        {
            "location": "/reference/http-exceptions/#unauthorized-http-401", 
            "text": "This exception indicates that the access to the route or object was denied, for example you should throw this exception when you expect the user to log in.  throw new \\Nf\\Error\\Exception\\Http\\Unauthorized()  This one does not accept any parameters.", 
            "title": "Unauthorized (http 401)"
        }, 
        {
            "location": "/reference/sessions-table/", 
            "text": "The Mysqli session handler expects this structure for the sessions table :\n\n\nThis example uses the name \"sessions\", but you can name how you want, just set it up in your config.ini.\n\n\nAlso, you can use the storage engine that you want, InnoDB, MyISAM, memory, whatever.\n\n\nCREATE TABLE `sessions` (\n  `id` varchar(32) COLLATE utf8_bin NOT NULL,\n  `modified` timestamp NULL DEFAULT NULL,\n  `lifetime` int(11) DEFAULT NULL,\n  `data` text COLLATE utf8_bin,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;", 
            "title": "sessions table structure"
        }
    ]
}